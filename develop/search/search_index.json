{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django DBBackup","text":"<p>This Django application provides management commands to help backup and restore your project database and media files with various storages such as Amazon S3, Dropbox, local file storage, or any Django-supported storage.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Secure your backup with GPG signature and encryption.</li> <li>Archive with compression.</li> <li>Easily manage remote archiving.</li> <li>Keep your development database up to date.</li> <li>Set up automated backups with Crontab or Celery.</li> <li>Manually backup and restore via Django management commands.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For more details, see the official documentation.</p>"},{"location":"#why-use-dbbackup","title":"Why use DBBackup?","text":"<p>DBBackup gives you a simple yet robust interface to backup, encrypt, transmit, and restore your database and media.</p> <p>In a few words, it is a pipe between your Django project and your backups. It is written to be far more efficient than Django's backup/restore commands by using your database's native/standard/best procedure(s) or tool(s) to perform backups.</p> <p>Ultimately, this helps simplify the task of \"creating a backup\" by removing the need for writing relational query commands, using complex tools, or creating scripts. Optionally, DBBackup can apply compression and/or encryption before transferring the data to nearly any storage system.</p>"},{"location":"#other-resources","title":"Other Resources","text":"<ul> <li>GitHub repository</li> <li>PyPI project</li> <li>Documentation</li> <li>GitHub issues</li> <li>GitHub discussions</li> <li>GitHub pull requests</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Implement new <code>SqliteBackupConnector</code> to backup SQLite3 databases using the <code>.backup</code> command (safe to execute on databases with active connections).</li> <li>Verified full Windows compatibility via new CI workflows.</li> <li>Add Django Signals support for backup and restore operations. New signals include <code>pre_backup</code>, <code>post_backup</code>, <code>pre_restore</code>, <code>post_restore</code>, <code>pre_media_backup</code>, <code>post_media_backup</code>, <code>pre_media_restore</code>, and <code>post_media_restore</code>.</li> <li>New <code>DjangoConnector</code> that provides database-agnostic backup and restore functionality using Django's built-in <code>dumpdata</code> and <code>loaddata</code> management commands.</li> <li>Added <code>ENABLE_ROW_SECURITY</code> setting for PostgreSQL connectors to support databases with row-level security policies.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>This repository has been transferred out of Jazzband due to logistical concerns.</li> <li>Improve error message for missing database tools (<code>pg_dump</code>, <code>mysqldump</code>, etc.) to provide guidance instead of generic \"No such file or directory\" errors.</li> <li>Changed default SQLite connector from <code>SqliteConnector</code> to <code>SqliteBackupConnector</code> to adhere to best practices.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Drop support for end-of-life Python 3.7 and 3.8.</li> <li>Drop support for end-of-life Django 3.2.</li> <li>Drop <code>pytz</code> dependency in favor of Python's standard library <code>zoneinfo</code> (following Django 4.0+ timezone implementation).</li> <li>Drop support for <code>DBBACKUP_STORAGE</code> AND <code>DBBACKUP_STORAGE_OPTIONS</code> settings, use Django's <code>STORAGES['dbbackup']</code> setting instead.</li> <li>Remove deprecated <code>DBBACKUP_FAILURE_RECIPIENTS</code> setting, use <code>DBBACKUP_ADMINS</code> instead.</li> <li>Remove deprecated code for legacy Django version compatibility.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed <code>-O</code> flag to properly handle S3 URIs. Now <code>python manage.py dbbackup -O s3://bucket/path/</code> and <code>python manage.py mediabackup -O s3://bucket/path/</code> correctly route S3 URIs to the storage backend instead of attempting to write to local filesystem.</li> <li>Fix issues with parsing excess whitespace within <code>dbbackup -d \"&lt;COMMA_SEPARATED_ARGS&gt;\"</code></li> <li>Fix encryption support when using <code>gnupg==5.x</code>.</li> <li>Resolve SQLite backup temporary file locking issues on Windows.</li> <li>Fix MediaRestore path corruption for files containing \"media\" in their paths.</li> <li>Fix FTP storage restore issue where file objects without <code>fileno()</code> support caused <code>io.UnsupportedOperation</code> error during database restore operations.</li> <li>Fix SQLite restore failing when multi-line <code>TextField</code> content contains semicolons.</li> <li>Fix SQLite <code>no such table</code> errors.</li> <li>Fix SQLite <code>UNIQUE constraint</code> errors.</li> <li>Fix SQLite <code>index</code>/<code>trigger</code>/<code>view</code> <code>&lt;NAME&gt; already exists</code> errors.</li> <li>Fixed <code>pg_dump</code> error when backing up PostgreSQL databases with row-level security policies enabled.</li> <li>Fix PostgreSQL restore errors with identity columns by automatically enabling <code>--if-exists</code> when using <code>--clean</code> in <code>PgDumpBinaryConnector</code>.</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Use environment variable for PostgreSQL password to prevent password leakage in logs/emails.</li> </ul>"},{"location":"changelog/#430-2025-05-09","title":"4.3.0 - 2025-05-09","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add generic <code>--pg-options</code> to pass custom options to postgres.</li> <li>Add option <code>--if-exists</code> for <code>pg_dump</code> command.</li> <li>Support Python 3.13 and Django 5.2.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Empty string as HOST for postgres unix domain socket connection is now supported.</li> </ul>"},{"location":"changelog/#421-2024-08-23","title":"4.2.1 - 2024-08-23","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Add <code>--no-drop</code> option to <code>dbrestore</code> command to prevent dropping tables before restoring data.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix bug where sqlite <code>dbrestore</code> would fail if field data contains the line break character.</li> </ul>"},{"location":"changelog/#420-2024-08-22","title":"4.2.0 - 2024-08-22","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add PostgreSQL Schema support.</li> <li>Add support for new <code>STORAGES</code> (Django 4.2+) setting under the 'dbbackup' alias.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Set postgres default database <code>HOST</code> to <code>\"localhost\"</code>.</li> <li>Add warning for filenames with slashes in them.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Remove usage of deprecated <code>get_storage_class</code> function in newer Django versions.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fix restore of database from S3 storage by reintroducing <code>inputfile.seek(0)</code> to <code>utils.uncompress_file</code>.</li> <li>Fix bug where dbbackup management commands would not respect <code>settings.py:DBBACKUP_DATABASES</code>.</li> </ul>"},{"location":"changelog/#410-2024-01-14","title":"4.1.0 - 2024-01-14","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Support Python 3.11 and 3.12.</li> <li>Support Django 4.1, 4.2, and 5.0.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Update documentation for backup directory consistency and update links.</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Drop python 3.6.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix restore fail after editing filename.</li> <li><code>RESTORE_PREFIX</code> for <code>RESTORE_SUFFIX</code>.</li> </ul>"},{"location":"changelog/#402-2022-09-27","title":"4.0.2 - 2022-09-27","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Support for prometheus wrapped databases.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Backup of SQLite fail if there are Virtual Tables (e.g. FTS tables).</li> <li>Fix broken <code>unencrypt_file</code> function in <code>python-gnupg</code>.</li> </ul>"},{"location":"changelog/#401-2022-07-09","title":"4.0.1 - 2022-07-09","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Enable functional tests in CI.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>As of this version, dbbackup is now within Jazzband! This version tests our Jazzband release CI, and adds miscellaneous refactoring/cleanup.</li> <li>Update <code>settings.py</code> comment.</li> <li>Jazzband transfer tasks.</li> <li>Refactoring and tooling.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix GitHub Actions configuration.</li> </ul>"},{"location":"changelog/#400b0-2021-12-19","title":"4.0.0b0 - 2021-12-19","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Add authentication database support for MongoDB.</li> <li>Explicitly support Python 3.6+.</li> <li>Add support for exclude tables data in the command interface.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Replace <code>ugettext_lazy</code> with <code>gettext_lazy</code>.</li> <li>Changed logging settings from <code>settings.py</code> to late init.</li> <li>Use <code>exclude-table-data</code> instead of <code>exclude-table</code>.</li> <li>Move author and version information into <code>setup.py</code> to allow building package in isolated environment (e.g. with the <code>build</code> package).</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Remove six dependency.</li> <li>Drop support for end of life Django versions. Currently support 2.2, 3.2, 4.0.</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix <code>RemovedInDjango41Warning</code> related to <code>default_app_config</code>.</li> <li>Fix authentication error when postgres is password protected.</li> <li>Documentation fixes.</li> </ul>"},{"location":"changelog/#330-2020-04-14","title":"3.3.0 - 2020-04-14","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li><code>\"output-filename\"</code> in <code>mediabackup</code> command.</li> <li>Updates to include SFTP storage.</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fixes for test infrastructure and mongodb support.</li> <li>sqlite3: don't throw warnings if table already exists.</li> <li>Fixes for django v3 and update travis.</li> <li>Restoring from FTP.</li> <li>Fix management commands when using Postgres on non-latin Windows.</li> <li>Fix improper database name selection when performing a restore.</li> </ul>"},{"location":"changelog/#320-2017-09-18","title":"3.2.0 - 2017-09-18","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li><code>PgDumpBinaryConnector</code> (binary <code>pg_dump</code> integration) with related functional tests.</li> <li>Option to keep specific old backups (custom clean old backups logic).</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Updated PostgreSQL documentation and help text for clarity.</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>SFTP storage file attribute error (\"SFTPStorageFile object has no attribute name\").</li> <li>Escaping of passwords passed to commands.</li> <li>Corrected management command help text after flag logic change.</li> </ul>"},{"location":"changelog/#313-2016-11-25","title":"3.1.3 - 2016-11-25","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Reverted a regression in <code>pg_dump</code> database name handling introduced shortly before.</li> </ul>"},{"location":"changelog/#312-2016-11-25","title":"3.1.2 - 2016-11-25","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Correct <code>pg_dump</code> invocation: proper username and database argument handling.</li> </ul>"},{"location":"changelog/#311-2016-11-16","title":"3.1.1 - 2016-11-16","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Unicode handling issues with SQLite backups.</li> </ul>"},{"location":"changelog/#310-2016-11-15","title":"3.1.0 - 2016-11-15","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Support for inheriting parent environment variables in command connectors (<code>USE_PARENT_ENV</code>).</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Complete revamp of logging and error email notification system (more structured logging &amp; tests).</li> </ul>"},{"location":"changelog/#304-2016-11-14","title":"3.0.4 - 2016-11-14","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Ability to link / register custom connectors.</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Use na\u00efve (timezone-unaware) <code>datetime</code> in backup filenames for broader compatibility.</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li><code>mediabackup</code> timeout issue.</li> <li>Improved PostgreSQL <code>dbrestore</code> error recognition.</li> </ul>"},{"location":"changelog/#303-2016-09-15","title":"3.0.3 - 2016-09-15","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Server name filter for database and media backup/restore.</li> <li>Ability to select multiple databases for backup.</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Improved filename generation logic.</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Database filter logic and clean backup behavior.</li> </ul>"},{"location":"changelog/#302-2016-08-06","title":"3.0.2 - 2016-08-06","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Disabled Django loggers inadvertently affecting application logging.</li> </ul>"},{"location":"changelog/#301-2016-08-04","title":"3.0.1 - 2016-08-04","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>New connector architecture with dedicated connectors for PostgreSQL, MySQL, SQLite (copy) and MongoDB.</li> <li>Media backup &amp; restore system overhaul (per-file processing, media restore command &amp; tests).</li> <li>Exclude table/data options, prefix &amp; suffix options for connector commands.</li> <li>Environment variable control for command execution.</li> <li>GIS database engine mapping support.</li> <li>Functional, integration and upgrade test suites; app &amp; system checks integration.</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Refactored and unified code between database &amp; media backup/restore commands.</li> <li>Renamed <code>mediabackup</code> option (<code>--no-compress</code> replaced by explicit <code>--compress</code>).</li> </ul>"},{"location":"changelog/#removed_4","title":"Removed","text":"<ul> <li>Legacy <code>DBCommand</code> code in favor of new connector system.</li> </ul>"},{"location":"changelog/#250-2016-03-29","title":"2.5.0 - 2016-03-29","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li><code>--filename</code> and <code>--path</code> options for <code>dbbackup</code> / <code>dbrestore</code> commands.</li> <li>Binary size unit prefixes in output.</li> </ul>"},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Dropbox storage updated to OAuth2 &amp; Python 3 compatibility.</li> </ul>"},{"location":"changelog/#removed_5","title":"Removed","text":"<ul> <li><code>DBBACKUP_DROPBOX_ACCESS_TYPE</code> setting (deprecated by OAuth2 changes).</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>NameError for missing <code>warnings</code> import.</li> <li>Wildcard handling in generated filenames; proper server name derivation for SQLite paths.</li> </ul>"},{"location":"changelog/#233-2015-10-05","title":"2.3.3 - 2015-10-05","text":""},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Initial copy from BitBucket to GitHub.</li> </ul>"},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Miscellaneous maintenance and minor bug fixes.</li> </ul>"},{"location":"commands/","title":"Commands","text":"<p>DBBackup exposes Django management commands for creating and restoring database and media backups. Without extra arguments <code>dbbackup</code> and <code>mediabackup</code> create a backup and upload it to the configured <code>STORAGES['dbbackup']</code> backend; <code>dbrestore</code> / <code>mediarestore</code> download and restore the most recent matching backup.</p> <p>Use <code>python manage.py &lt;command&gt; --help</code> for full option details.</p>"},{"location":"commands/#dbbackup","title":"dbbackup","text":"<p>Create a database backup (optionally compressed/encrypted) and upload it.</p> <pre><code>$ ./manage.py dbbackup\nBacking Up Database: tmp.x0kN9sYSqk\nBackup size: 3.3 KiB\nWriting file to tmp-zuluvm-2016-07-29-100954.dump\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py dbbackup --help\n</code></pre>"},{"location":"commands/#dbrestore","title":"dbrestore","text":"<p>Download the latest database backup (or a specified one) then restore it.</p> <pre><code>$ ./manage.py dbrestore\nRestoring backup for database: tmp.x0kN9sYSqk\nFinding latest backup\nRestoring: tmp-zuluvm-2016-07-29-100954.dump\nRestore tempfile created: 3.3 KiB\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py dbrestore --help\n</code></pre>"},{"location":"commands/#mediabackup","title":"mediabackup","text":"<p>Create an archive (tar) of media files, optionally compress/encrypt, and upload it to backup storage.</p> <pre><code>$ ./manage.py mediabackup\nBackup size: 10.0 KiB\nWriting file to zuluvm-2016-07-04-081612.tar\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py mediabackup --help\n</code></pre>"},{"location":"commands/#mediarestore","title":"mediarestore","text":"<p>Restore media files: extract files from the archive and put them into media storage.</p> <pre><code>$ ./manage.py mediarestore\nRestoring backup for media files\nFinding latest backup\nReading file zuluvm-2016-07-04-082551.tar\nRestoring: zuluvm-2016-07-04-082551.tar\nBackup size: 10.0 KiB\nAre you sure you want to continue? [Y/n]\n2 file(s) restored\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py mediarestore --help\n</code></pre>"},{"location":"commands/#listbackups","title":"listbackups","text":"<p>This command lists backups filtered by type (<code>'media'</code> or <code>'db'</code>), compression, or encryption.</p> <p>For detailed help information, run:</p> <pre><code>python manage.py listbackups --help\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#general-settings","title":"General settings","text":""},{"location":"configuration/#dbbackup_databases","title":"DBBACKUP_DATABASES","text":"<p>List of key entries for <code>settings.DATABASES</code> which shall be used to connect and create database backups.</p> <p>Default: <code>list(settings.DATABASES.keys())</code> (keys of all entries listed)</p>"},{"location":"configuration/#dbbackup_tmp_dir","title":"DBBACKUP_TMP_DIR","text":"<p>Local directory used for creating temporary files (for example while streaming command output before uploading to storage).</p> <p>Default: <code>tempfile.gettempdir()</code></p>"},{"location":"configuration/#dbbackup_tmp_file_read_size","title":"DBBACKUP_TMP_FILE_READ_SIZE","text":"<p>Read chunk size (in bytes) when streaming temporary files. Increase this if you're working with very large backups and want fewer read system calls; decrease for memory constrained environments.</p> <p>Default: <code>1024 * 1000</code> (\u22481 MB)</p>"},{"location":"configuration/#dbbackup_tmp_file_max_size","title":"DBBACKUP_TMP_FILE_MAX_SIZE","text":"<p>Maximum size in bytes for file handling in memory before a temporary file is written in <code>DBBACKUP_TMP_DIR</code>.</p> <p>Default: <code>10*1024*1024</code></p>"},{"location":"configuration/#dbbackup_cleanup_keep-and-dbbackup_cleanup_keep_media","title":"DBBACKUP_CLEANUP_KEEP and DBBACKUP_CLEANUP_KEEP_MEDIA","text":"<p>Number of most recent backups to keep when you pass the <code>--clean &lt;amount&gt;</code> option to <code>dbbackup</code> or <code>mediabackup</code>. Older files beyond this count are deleted. <code>DBBACKUP_CLEANUP_KEEP_MEDIA</code> defaults to the same value unless set.</p> <p>Default: <code>10</code></p>"},{"location":"configuration/#dbbackup_cleanup_keep_filter","title":"DBBACKUP_CLEANUP_KEEP_FILTER","text":"<p>Optional callable for custom retention logic run during cleanup. Receives the filename of a candidate backup slated for deletion and returns <code>True</code> to keep or <code>False</code> to delete. Combine this with <code>--clean</code> to implement e.g. \u201ckeep all end of month backups\u201d.</p> <p>Default: <code>lambda filename: False</code></p>"},{"location":"configuration/#dbbackup_date_format","title":"DBBACKUP_DATE_FORMAT","text":"<p><code>strftime</code> format string used when expanding <code>{datetime}</code> in filename templates. Must contain only alphanumeric characters plus <code>_ - %</code>.</p> <p>Default: <code>'%Y-%m-%d-%H%M%S'</code></p>"},{"location":"configuration/#dbbackup_hostname","title":"DBBACKUP_HOSTNAME","text":"<p>Used to identify a backup by a server name in the file name.</p> <p>Default: <code>socket.gethostname()</code></p>"},{"location":"configuration/#dbbackup_filename_template","title":"DBBACKUP_FILENAME_TEMPLATE","text":"<p>Template used to construct database backup filenames. May be a format string or a callable. Default: <code>'{databasename}-{servername}-{datetime}.{extension}'</code>. If you supply a function it must accept the keyword arguments shown below and return the complete filename string (without path).</p> <pre><code>def backup_filename(databasename, servername, datetime, extension, content_type):\n    pass\n\nDBBACKUP_FILENAME_TEMPLATE = backup_filename\n</code></pre> <p>Use a custom function if you need hierarchical prefixes (e.g. <code>year/month/</code>), or naming compatible with automatic life cycle / expiration rules of your object storage provider. <code>{datetime}</code> is rendered using <code>DBBACKUP_DATE_FORMAT</code>.</p>"},{"location":"configuration/#dbbackup_media_filename_template","title":"DBBACKUP_MEDIA_FILENAME_TEMPLATE","text":"<p>Same as <code>DBBACKUP_FILENAME_TEMPLATE</code>, but used for media backups.</p> <p>Default: <code>'{servername}-{datetime}.{extension}'</code></p>"},{"location":"configuration/#dbbackup_media_path","title":"DBBACKUP_MEDIA_PATH","text":"<p>Filesystem path whose contents are archived by the <code>mediabackup</code> command. By default this is <code>settings.MEDIA_ROOT</code>.</p> <p>Default: <code>settings.MEDIA_ROOT</code></p>"},{"location":"configuration/#encrypting-your-backups","title":"Encrypting your backups","text":"<p>Backups may contain personal or otherwise sensitive data. When storing them outside trusted infrastructure you should encrypt them. Keep your private keys secure and ensure you have tested decryption in a disaster scenario.</p> <p>You can encrypt a backup with the <code>--encrypt</code> option. The backup is done using GPG.</p> <pre><code>python manage.py dbbackup --encrypt\n</code></pre> <p>...or when restoring from an encrypted backup:</p> <pre><code>python manage.py dbrestore --decrypt\n</code></pre> <p>Requirements:</p> <ul> <li>Install the python package python-gnupg: <code>pip install python-gnupg&gt;=0.5.0</code>.</li> <li>You need a GPG key. (GPG manual)</li> <li>Set the setting <code>DBBACKUP_GPG_RECIPIENT</code> to the name of the GPG key.</li> </ul> <p>Note (Windows): The <code>gpg</code> executable must be installed and on your PATH for encryption/decryption. If it is absent, django-dbbackup still works; only encryption-related features are unavailable. The test suite will automatically skip encryption tests when <code>gpg</code> is not found.</p>"},{"location":"configuration/#dbbackup_gpg_always_trust","title":"DBBACKUP_GPG_ALWAYS_TRUST","text":"<p>If GPG does not fully trust the public key, encryption can fail. Setting this to <code>True</code> adds <code>--trust-model always</code> to bypass trust checks (only do this in controlled environments).</p>"},{"location":"configuration/#dbbackup_gpg_recipient","title":"DBBACKUP_GPG_RECIPIENT","text":"<p>Recipient (key ID, fingerprint, or email) used for GPG encryption. Required when using <code>--encrypt</code> and for automatic decryption with <code>--decrypt</code>.</p>"},{"location":"configuration/#dbbackup_connectors","title":"DBBACKUP_CONNECTORS","text":"<p>Optional per database override mapping similar to <code>DATABASES</code>. Lets you define different credentials / hosts exclusively for backup / restore operations (e.g. read from a replica). Keys correspond to database aliases.</p> <p>See the Databases section for details on how to configure connectors.</p> <p>Default: <code>{}</code></p>"},{"location":"configuration/#dbbackup_connector_mapping","title":"DBBACKUP_CONNECTOR_MAPPING","text":"<p>Map custom database engine names (e.g. from wrappers like <code>transaction_hooks</code> or third party observability packages) to an existing DBBackup connector class path. Useful when a third party backend subclasses a supported Django backend but uses a different engine string.</p> <p>See the Databases section for details on how to configure the connector mapping.</p> <p>Default: <code>{}</code></p>"},{"location":"configuration/#email-configuration","title":"Email configuration","text":""},{"location":"configuration/#dbbackup_send_email","title":"DBBACKUP_SEND_EMAIL","text":"<p>Controls whether django-dbbackup sends an error email when an uncaught exception is raised.</p> <p>Default: <code>True</code></p>"},{"location":"configuration/#dbbackup_server_email","title":"DBBACKUP_SERVER_EMAIL","text":"<p>The email address that error messages come from, such as those sent to <code>DBBACKUP_ADMINS</code>.</p> <p>Default: <code>django.conf.settings.SERVER_EMAIL</code></p>"},{"location":"configuration/#dbbackup_admins","title":"DBBACKUP_ADMINS","text":"<p>A list of recipients that receive error emails when <code>DEBUG=False</code> and an unhandled exception occurs in a DBBackup command. Follows Django's standard <code>ADMINS</code> tuple-of-tuples structure: <code>(('Full Name', 'email@example.com'), ...)</code>.</p> <p>Default: <code>django.conf.settings.ADMINS</code></p>"},{"location":"configuration/#dbbackup_email_subject_prefix","title":"DBBACKUP_EMAIL_SUBJECT_PREFIX","text":"<p>Subject-line prefix for email messages sent by DBBackup.</p> <p>Default: <code>'[dbbackup] '</code></p>"},{"location":"configuration/#database-configuration","title":"Database configuration","text":"<p>By default DBBackup uses values from <code>settings.DATABASES</code>. Use <code>DBBACKUP_CONNECTORS</code> (documented above) for backup specific overrides. See Database settings for backend specific options.</p>"},{"location":"configuration/#storage-configuration","title":"Storage configuration","text":"<p>You must configure a storage backend (<code>STORAGES['dbbackup']</code>) to persist backups. See Storage settings for supported options.</p>"},{"location":"contributing/","title":"Contributing guide","text":"<p>django-dbbackup is free licensed software and community contributions are welcome. This guide explains how to develop, test, and propose changes.</p>"},{"location":"contributing/#creating-a-development-environment","title":"Creating a development environment","text":"<p>If you plan to make code changes to this repository, you will need to install the following dependencies first:</p> <ul> <li>Git</li> <li>Python 3.9+</li> <li>Hatch</li> </ul> <p>Once you finish installing these dependencies, you can clone this repository:</p> <pre><code>git clone https://github.com/Archmonger/django-dbbackup.git\ncd django-dbbackup\n</code></pre>"},{"location":"contributing/#executing-test-environment-commands","title":"Executing test environment commands","text":"<p><code>hatch</code> manages isolated environments; the commands below cover common tasks.</p>"},{"location":"contributing/#tests","title":"Tests","text":"Command Description <code>hatch test</code> Run Python tests using the current environment's Python version <code>hatch test --all</code> Run tests using all compatible Python and Django versions <code>hatch test --python 3.9</code> Run tests using a specific Python version <code>hatch test --include \"django=5.1\"</code> Run tests using a specific Django version <code>hatch test -k test_backup_filter</code> Run only a specific test <code>hatch run functional:sqlite --all</code> Run end-to-end SQLite backup and restore tests <code>hatch run functional:postgres --all</code> Run end-to-end PostgreSQL tests using all compatible connectors What other arguments are available to me? <p>The <code>hatch test</code> command is a wrapper for <code>pytest</code>. Hatch \"intercepts\" a handful of arguments, which can be previewed by typing <code>hatch test --help</code>.</p> <p>Any additional arguments in the <code>test</code> command are directly passed on to pytest. See the pytest documentation for what additional arguments are available.</p>"},{"location":"contributing/#linting-and-formatting","title":"Linting and Formatting","text":"Command Description <code>hatch run lint:format</code> Run formatters to fix code style <code>hatch run lint:format-check</code> Check code formatting without making changes <code>hatch run lint:check</code> Run all linters <code>hatch run precommit:check</code> Run all <code>pre-commit</code> checks configured within this repository <code>hatch run precommit:update</code> Update the <code>pre-commit</code> hooks configured within this repository Configure your IDE for linting <p>This repository uses <code>ruff</code> and <code>pylint</code> for linting and formatting.</p> <p>You can install <code>ruff</code> as a plugin to your preferred code editor to create a similar environment.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"Command Description <code>hatch run docs:serve</code> Start the <code>mkdocs</code> server to view documentation locally <code>hatch run docs:build</code> Build the documentation"},{"location":"contributing/#environment-management","title":"Environment Management","text":"Command Description <code>hatch build --clean</code> Build the package from source <code>hatch env prune</code> Delete all virtual environments created by <code>hatch</code> <code>hatch python install 3.12</code> Install a specific Python version to your system Check out Hatch for all available commands! <p>This documentation only covers commonly used commands.</p> <p>You can type <code>hatch --help</code> to see all available commands.</p>"},{"location":"contributing/#submit-a-bug-issue-or-enhancement","title":"Submit a bug, issue or enhancement","text":"<p>Track bugs, feature proposals, and questions via GitHub Issues. Open an issue if:</p> <ul> <li>You have an improvement idea</li> <li>You found a bug</li> <li>You've got a question</li> <li>More generally something seems wrong for you</li> </ul>"},{"location":"contributing/#make-a-patch","title":"Make a patch","text":"<p>We use pull requests for all code changes. To streamline review:</p> <ol> <li>Fork the project and make a new branch</li> <li>Make your changes with tests if possible and documentation if needed</li> <li>Run <code>hatch test</code> and <code>hatch run functional:test</code> to verify your changes</li> <li>Run <code>hatch run lint:check</code> to ensure code quality</li> <li>Push changes to your fork repository and test it with GitHub Actions</li> <li>If it succeeds, open a pull request</li> <li>Follow up politely if there's no feedback after a few days</li> </ol> <p>Note</p> <p>We recommend testing with multiple Python and Django versions using <code>hatch test --all</code> before pushing. DBBackup uses a lot of file operations, so breaks between versions are possible.</p>"},{"location":"contributing/#test-environment-configuration","title":"Test environment configuration","text":"<p>The test suite uses a self contained Django project (<code>dbbackup.tests</code>). These environment variables adjust its behavior:</p> <p><code>DB_ENGINE</code> - Default: <code>django.db.backends.sqlite3</code></p> <p>Database engine to use. See <code>django.db.backends</code> for default backends.</p> <p><code>DB_NAME</code> - Default: <code>:memory:</code></p> <p>Database name. Adjust for non-SQLite backends.</p> <p><code>DB_USER</code> - Default: <code>None</code></p> <p>Database username</p> <p><code>DB_PASSWORD</code> - Default: <code>None</code></p> <p>Database password</p> <p><code>DB_HOST</code> - Default: <code>None</code></p> <p>Database host</p> <p><code>MEDIA_ROOT</code> - Default= <code>tempfile.mkdtemp()</code></p> <p>Django <code>MEDIA_ROOT</code>; override to test media backup from a custom path.</p> <p><code>STORAGE</code> - Default: <code>dbbackup.tests.utils.FakeStorage</code></p> <p>Storage class used for backups.</p> <p><code>STORAGE_OPTIONS</code></p> <p>Comma separated <code>key=value</code> pairs parsed into a dict passed to the storage constructor.</p>"},{"location":"databases/","title":"Database settings","text":"<p>The following databases are supported by this application:</p> <ul> <li>SQLite</li> <li>MySQL</li> <li>PostgreSQL</li> <li>MongoDB</li> <li>... and any other Django-supported database (via <code>DjangoConnector</code>)</li> </ul> <p>By default DBBackup reuses connection details from <code>settings.DATABASES</code>. Sometimes you want different credentials or a different host (e.g. read-only replica) just for backups. Use <code>DBBACKUP_CONNECTORS</code> for that purpose; it mirrors Django's <code>DATABASES</code> structure but only overrides the keys you supply.</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'USER': 'backupuser',\n        'PASSWORD': 'backuppassword',\n        'HOST': 'replica-for-backup'\n    }\n}\n</code></pre> <p>This configuration will allow you to use a replica with a different host and user, which is a great practice if you don't want to overload your main database.</p> <p>DBBackup uses \u201cconnector\u201d classes to implement backend specific dump and restore logic. Each connector may expose additional settings documented below.</p>"},{"location":"databases/#common-settings","title":"Common Settings","text":"<p>All connectors have the following parameters:</p> Setting Description Default CONNECTOR Absolute path to connector class. Defaults by engine: <code>dbbackup.db.sqlite.SqliteBackupConnector</code> (sqlite3), <code>dbbackup.db.mysql.MysqlDumpConnector</code> (mysql), <code>dbbackup.db.postgresql.PgDumpConnector</code> (postgresql), <code>dbbackup.db.postgresql.PgDumpGisConnector</code> (postgis), <code>dbbackup.db.mongodb.MongoDumpConnector</code> (django_mongodb_engine), <code>dbbackup.db.django.DjangoConnector</code> (fallback / any unmapped). Prometheus wrappers are also supported mapping to the same connectors. Auto-detected from <code>ENGINE</code> EXCLUDE List of table names to exclude from dump (may be unsupported for raw file copy snapshot approaches). Example below. None EXTENSION File extension used for the generated dump archive. <code>dump</code> <p>All supported built-in connectors are described in more detail below. Following database wrappers from <code>django-prometheus</code> are supported: <code>django_prometheus.db.backends.postgresql</code> (-&gt; <code>PgDumpBinaryConnector</code>), <code>django_prometheus.db.backends.sqlite3</code> (-&gt; <code>SqliteBackupConnector</code>), <code>django_prometheus.db.backends.mysql</code> (-&gt; <code>MysqlDumpConnector</code>), <code>django_prometheus.db.backends.postgis</code> (-&gt; <code>PgDumpGisConnector</code>).</p> <p>Example for <code>EXCLUDE</code> usage:</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'EXCLUDE': ['django_session', 'temp_data'],\n    }\n}\n</code></pre> <p>Some connectors use a command line tool as a dump engine, <code>mysqldump</code> for example. These kinds of tools have common attributes:</p> Setting Description Default DUMP_CMD Path to command used to create a backup (e.g. <code>mysqldump</code>, <code>pg_dump</code>, <code>mongodump</code>). Applies only to command-line connectors (subclasses of <code>BaseCommandDBConnector</code>). Tool name inferred / must be in <code>PATH</code> RESTORE_CMD Path to command used for restore (e.g. <code>mysql</code>, <code>psql</code>, <code>pg_restore</code>, <code>mongorestore</code>). Tool name inferred / must be in <code>PATH</code> DUMP_PREFIX / RESTORE_PREFIX String inserted (with a space) before the actual dump/restore command (e.g. to add <code>time</code> or <code>nice</code>). None DUMP_SUFFIX / RESTORE_SUFFIX String appended (with a space) after the dump/restore command (e.g. to pipe or redirect). None ENV Base environment variables applied to every external command. <code>{}</code> DUMP_ENV / RESTORE_ENV Environment overrides/extensions applied only to dump / restore phases. <code>{}</code> USE_PARENT_ENV Whether to inherit parent process environment (e.g. to keep <code>PATH</code>). <code>True</code> <p>Example forcing a specific SSL mode for PostgreSQL dump:</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'DUMP_ENV': {'PGSSLMODE': 'require'}\n    }\n}\n</code></pre>"},{"location":"databases/#built-in-database-connectors","title":"Built-in Database Connectors","text":"<p>These connectors are provided by default and are designed to work with specific database engines. They provide optimized backup and restore functionality.</p>"},{"location":"databases/#sqlite","title":"SQLite","text":""},{"location":"databases/#sqlitebackupconnector","title":"SqliteBackupConnector","text":"<p>The <code>dbbackup.db.sqlite.SqliteBackupConnector</code> makes a copy of the SQLite database file using the <code>.backup</code> command, which is safe to execute while the database has ongoing/active connections.</p> <p>This is the default connector for SQLite databases.</p>"},{"location":"databases/#sqliteconnector","title":"SqliteConnector","text":"<p>It is in pure Python and is similar to the Sqlite <code>.dump</code> command for creating a SQL dump.</p> <p>This connector can be used to restore a backup to an existing (dirty) database due to it's generation of raw SQL statements. However, that is generally not recommended and can lead to unexpected results depending on your schema.</p>"},{"location":"databases/#sqlitecpconnector","title":"SqliteCPConnector","text":"<p>The <code>dbbackup.db.sqlite.SqliteCPConnector</code> connector can be used to make a simple raw copy of your database file, like a snapshot.</p> <p>In-memory databases are not dumpable with it. Since it works by copying the database file directly, it is not suitable for databases that are have active connections.</p>"},{"location":"databases/#mysql","title":"MySQL","text":"<p>MySQL defaults to <code>dbbackup.db.mysql.MysqlDumpConnector</code> which shells out to <code>mysqldump</code> for creation and <code>mysql</code> for restore.</p>"},{"location":"databases/#postgresql","title":"PostgreSQL","text":"<p>All PostgreSQL connectors have the following settings:</p>"},{"location":"databases/#settings","title":"Settings","text":"Setting Description Default SINGLE_TRANSACTION Wrap restore in a single transaction so errors cause full rollback (<code>--single-transaction</code> for <code>psql</code> / <code>pg_restore</code>). <code>True</code> DROP Include / execute drop statements when restoring (<code>--clean</code> with <code>pg_dump</code> / <code>pg_restore</code>). In binary mode drops happen during restore. <code>True</code> IF_EXISTS Add <code>IF EXISTS</code> to destructive statements in clean mode. Automatically enabled when <code>DROP=True</code> to prevent identity column errors. <code>False</code> ENABLE_ROW_SECURITY Enable row-level security for dumping data (<code>--enable-row-security</code> with <code>pg_dump</code>). Required for databases with row-level security policies. <code>False</code> <p>Example configuration for databases with row-level security:</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'ENABLE_ROW_SECURITY': True\n    }\n}\n</code></pre>"},{"location":"databases/#pgdumpconnector","title":"PgDumpConnector","text":"<p>The <code>dbbackup.db.postgresql.PgDumpConnector</code> uses <code>pg_dump</code> to create RAW SQL files and <code>psql</code> to restore them.</p> <p>This is the default connector for PostgreSQL databases, however, it is recommended to use the binary connector for better performance.</p>"},{"location":"databases/#pgdumpbinaryconnector","title":"PgDumpBinaryConnector","text":"<p>The <code>dbbackup.db.postgresql.PgDumpBinaryConnector</code> is similar to PgDumpConnector, but it uses <code>pg_dump</code> in binary mode and restores using <code>pg_restore</code>.</p> <p>This allows for faster and parallel-capable restores. It may still invoke <code>psql</code> for administrative tasks.</p>"},{"location":"databases/#postgis","title":"PostGIS","text":"<p>Set in <code>dbbackup.db.postgresql.PgDumpGisConnector</code>, it does the same as PostgreSQL but launches <code>CREATE EXTENSION IF NOT EXISTS postgis;</code> before restoring the database.</p>"},{"location":"databases/#settings_1","title":"Settings","text":"Setting Description Default PSQL_CMD Path to <code>psql</code> used for admin tasks (extension creation, etc.). <code>psql</code> PASSWORD If provided sets <code>PGPASSWORD</code> for all commands (prefer <code>.pgpass</code> for security). None ADMIN_USER Privileged user for administrative actions like enabling PostGIS. None ADMIN_PASSWORD Password for <code>ADMIN_USER</code> when needed. None SCHEMAS Limit dump to specific schemas (PostgreSQL connectors only). All non-system schemas"},{"location":"databases/#mongodb","title":"MongoDB","text":"<p>MongoDB uses by default <code>dbbackup.db.mongodb.MongoDumpConnector</code>. It uses <code>mongodump</code> and <code>mongorestore</code> for its job.</p> <p>For authentication enabled MongoDB deployments add the <code>AUTH_SOURCE</code> option to indicate the database used to verify credentials.</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        ...\n        'AUTH_SOURCE': 'admin',\n    }\n}\n</code></pre> <p>... or in <code>DATABASES</code>:</p> <pre><code>DATABASES = {\n    'default': {\n        ...\n        'AUTH_SOURCE': 'admin',\n    }\n}\n</code></pre>"},{"location":"databases/#settings_2","title":"Settings","text":"Setting Description Default OBJECT_CHECK Validate documents before inserting (<code>--objcheck</code>). <code>True</code> DROP Replace existing objects during restore (<code>--drop</code>). <code>True</code>"},{"location":"databases/#django-connector","title":"Django Connector","text":"<p>The Django connector (<code>dbbackup.db.django.DjangoConnector</code>) provides database-agnostic backup and restore functionality using Django's built-in <code>dumpdata</code> and <code>loaddata</code> management commands. This connector works with any Django-supported database backend.</p> <p>This connector is automatically used for any unmapped database engines. If needed, you can explicitly configure it:</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'CONNECTOR': 'dbbackup.db.django.DjangoConnector',\n    }\n}\n</code></pre>"},{"location":"databases/#key-features","title":"Key Features","text":"<ul> <li>Universal compatibility: Works with any database backend supported by Django</li> <li>No external dependencies: Uses Django's serialization system</li> <li>Model-level backups: Preserves foreign key relationships and data integrity</li> <li>JSON format: Creates human-readable backups in JSON format</li> </ul>"},{"location":"databases/#when-to-use","title":"When to Use","text":"<p>The Django connector is ideal for:</p> <ul> <li>Oracle databases (used by default)</li> <li>Custom or third-party database backends not explicitly supported</li> <li>Development environments where simplicity is preferred</li> <li>Cases where external database tools are not available</li> </ul>"},{"location":"databases/#limitations","title":"Limitations","text":"<ul> <li>Performance: Slower than native database tools for large datasets</li> <li>Database structure: Only backs up data, not database schema, indices, or procedures</li> </ul>"},{"location":"databases/#file-extension","title":"File Extension","text":"<p>By default, backups use the <code>.json</code> extension.</p>"},{"location":"databases/#custom-connectors","title":"Custom Connectors","text":"<p>To implement a custom connector, subclass <code>dbbackup.db.base.BaseDBConnector</code> and implement <code>_create_dump</code> / <code>_restore_dump</code>. If you need to run external commands, subclass <code>dbbackup.db.base.BaseCommandDBConnector</code> to inherit argument assembly helpers and environment handling.</p> <p>Here is an example, on how to easily use a custom connector that you have created or even that you simply want to reuse:</p> <pre><code>DBBACKUP_CONNECTOR_MAPPING = {\n    'transaction_hooks.backends.postgis': 'dbbackup.db.postgresql.PgDumpGisConnector',\n}\n</code></pre> <p>Swap in any custom connector path you created. The left hand side engine name should match the <code>ENGINE</code> value Django reports for that database alias.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-on-your-system","title":"Installing on your system","text":""},{"location":"installation/#getting-the-latest-stable-release","title":"Getting the latest stable release","text":"<pre><code>pip install django-dbbackup\n</code></pre>"},{"location":"installation/#getting-the-latest-from-github","title":"Getting the latest from GitHub","text":"<p>In general, you should not be downloading and installing stuff directly from repositories \u2014 especially not if you are backing up sensitive data.</p> <p>Security is important; bypassing PyPI repositories is a bad habit, because it will bypass the fragile key signature authentication that is at least present when using PyPI repositories.</p> <pre><code>pip install -e git+https://github.com/Archmonger/django-dbbackup.git#egg=django-dbbackup\n</code></pre>"},{"location":"installation/#add-it-in-your-project","title":"Add it in your project","text":"<p>In your <code>settings.py</code>, make sure you have the following things:</p> <pre><code>INSTALLED_APPS = (\n    ... ,\n    'dbbackup',  # django-dbbackup\n)\n\nSTORAGES = {\n    'dbbackup': {\n        'BACKEND': 'django.core.files.storage.FileSystemStorage',\n        'OPTIONS': {\n            'location': '/my/backup/dir/',\n        },\n    },\n}\n</code></pre> <p>Create the backup directory:</p> <pre><code>mkdir /my/backup/dir/\n</code></pre> <p>Note</p> <p>This configuration uses filesystem storage, but you can use any storage supported by Django API. See Storage settings for more information about it.</p>"},{"location":"installation/#testing-that-everything-worked","title":"Testing that everything worked","text":"<p>Now, you should be able to create your first backup by running:</p> <pre><code>python manage.py dbbackup\n</code></pre> <p>If your database was called <code>default</code> which is the normal Django behavior of a single-database project, you should now see a new file in your backup directory.</p>"},{"location":"integration/","title":"Integration tutorials","text":"<p>Note</p> <p>If you have a custom and/or interesting way of using DBBackup, do not hesitate to make a pull request.</p>"},{"location":"integration/#django-cron","title":"Django-Cron","text":"<p>Example recurring job using django-cron with filesystem storage:</p> <pre><code>import os\nfrom django.core import management\nfrom django.conf import settings\nfrom django_cron import CronJobBase, Schedule\n\n\nclass Backup(CronJobBase):\n    RUN_AT_TIMES = ['6:00', '18:00']\n    schedule = Schedule(run_at_times=RUN_AT_TIMES)\n    code = 'my_app.Backup'\n\n    def do(self):\n        management.call_command('dbbackup')\n</code></pre>"},{"location":"integration/#django-crontab","title":"Django-Crontab","text":"<p>Example crontab entry using django-crontab and filesystem storage:</p> <p>In <code>settings.py</code>:</p> <pre><code>CRONTAB_COMMAND_SUFFIX = '2&gt;&amp;1'\nCRONJOBS = [\n    ('0 5 * * *', 'core.backup.backup_job', '&gt;&gt; ' + os.path.join(CORE_DIR, 'backup/backup.log'))\n]\n</code></pre> <p>In <code>backup.py</code>:</p> <pre><code>from datetime import datetime\nfrom django.core import management\n\ndef backup_job():\n    print(\"[{}] Backing up database and media files...\".format(datetime.now()))\n    management.call_command('dbbackup', '--clean')\n    management.call_command('mediabackup', '--clean')\n    print(\"[{}] Backup done!\".format(datetime.now()))\n</code></pre> <p>Add the cron job:</p> <pre><code>python manage.py crontab add\n</code></pre>"},{"location":"integration/#django-celery-beat","title":"Django-Celery-Beat","text":"<p>Example setup using Celery with django-celery-beat for scheduled backups:</p> <p>First, create a <code>tasks.py</code> file in your app:</p> <pre><code>from celery import Celery\nfrom django.core import management\n\napp = Celery()\n\n\n@app.task\ndef backup_db():\n    management.call_command('dbbackup')\n\n\n@app.task\ndef backup_media():\n    management.call_command('mediabackup')\n</code></pre> <p>Then, create a Django management command to set up periodic tasks (e.g., <code>management/commands/setup_backup_schedule.py</code>):</p> <pre><code>from django.core.management.base import BaseCommand\nfrom django_celery_beat.models import CrontabSchedule, PeriodicTask\nimport pytz\n\n\nclass Command(BaseCommand):\n    help = 'Creates crontab schedule objects and periodic tasks that use them'\n\n    def handle(self, *args, **options):\n        # Schedule for daily backups at midnight UTC\n        every_day, _ = CrontabSchedule.objects.get_or_create(\n            minute='0',\n            hour='0',\n            day_of_week='*',\n            day_of_month='*',\n            month_of_year='*',\n            timezone=pytz.timezone('UTC')\n        )\n\n        # Create periodic tasks\n        PeriodicTask.objects.get_or_create(\n            crontab=every_day,\n            name='Backup DB',\n            task='myapp.tasks.backup_db',\n        )\n\n        PeriodicTask.objects.get_or_create(\n            crontab=every_day,\n            name='Backup Media',\n            task='myapp.tasks.backup_media',\n        )\n\n        self.stdout.write(\n            self.style.SUCCESS('Successfully created backup schedule')\n        )\n</code></pre> <p>Run the setup command:</p> <pre><code>python manage.py setup_backup_schedule\n</code></pre> <p>Make sure your Celery worker and beat scheduler are running:</p> <pre><code>celery -A myproject worker --loglevel=info\ncelery -A myproject beat --loglevel=info\n</code></pre>"},{"location":"integration/#periodic-verification","title":"Periodic Verification","text":"<p>Consider scheduling a periodic restore test (e.g. weekly) into a throw-away database to ensure your backup or filesystem remains valid:</p> <pre><code>python manage.py dbrestore --database test_restore --noinput --verbosity 1\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#bsd-3-clause-license","title":"BSD-3-Clause License","text":"<p>Copyright (c) 2025, Mark Bakhit</p> <p>All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name django-dbbackup nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </p>"},{"location":"signals/","title":"Django Signals Support","text":"<p>Django-dbbackup now supports Django signals that allow you to hook into backup and restore operations to perform custom actions.</p>"},{"location":"signals/#available-signals","title":"Available Signals","text":"<p>The following signals are available. Each provide different arguments depending on the operation.</p>"},{"location":"signals/#database-backup-signals","title":"Database Backup Signals","text":"<p>pre_backup (<code>dbbackup.signals.pre_backup</code>)</p> <p>Sent before a database backup starts.</p> Parameter Description <code>sender</code> The command class (<code>DbBackupCommand</code>) <code>database</code> Database configuration dict <code>connector</code> Database connector instance <code>servername</code> Server name for the backup <p>post_backup (<code>dbbackup.signals.post_backup</code>)</p> <p>Sent after a database backup completes.</p> Parameter Description <code>sender</code> The command class (<code>DbBackupCommand</code>) <code>database</code> Database configuration dict <code>connector</code> Database connector instance <code>servername</code> Server name for the backup <code>filename</code> Generated backup filename <code>storage</code> Storage backend instance"},{"location":"signals/#database-restore-signals","title":"Database Restore Signals","text":"<p>pre_restore (<code>dbbackup.signals.pre_restore</code>)</p> <p>Sent before a database restore starts.</p> Parameter Description <code>sender</code> The command class (<code>DbRestoreCommand</code>) <code>database</code> Database configuration dict <code>database_name</code> Name of the database being restored <code>filename</code> Backup filename being restored <code>servername</code> Server name <code>storage</code> Storage backend instance <p>post_restore (<code>dbbackup.signals.post_restore</code>)</p> <p>Sent after a database restore completes.</p> Parameter Description <code>sender</code> The command class (<code>DbRestoreCommand</code>) <code>database</code> Database configuration dict <code>database_name</code> Name of the database being restored <code>filename</code> Backup filename being restored <code>servername</code> Server name <code>connector</code> Database connector instance <code>storage</code> Storage backend instance"},{"location":"signals/#media-backup-signals","title":"Media Backup Signals","text":"<p>pre_media_backup (<code>dbbackup.signals.pre_media_backup</code>)</p> <p>Sent before a media backup starts.</p> Parameter Description <code>sender</code> The command class (<code>MediaBackupCommand</code>) <code>servername</code> Server name for the backup <code>storage</code> Storage backend instance <p>post_media_backup (<code>dbbackup.signals.post_media_backup</code>)</p> <p>Sent after a media backup completes.</p> Parameter Description <code>sender</code> The command class (<code>MediaBackupCommand</code>) <code>filename</code> Generated backup filename <code>servername</code> Server name for the backup <code>storage</code> Storage backend instance"},{"location":"signals/#media-restore-signals","title":"Media Restore Signals","text":"<p>pre_media_restore (<code>dbbackup.signals.pre_media_restore</code>)</p> <p>Sent before a media restore starts.</p> Parameter Description <code>sender</code> The command class (<code>MediaRestoreCommand</code>) <code>filename</code> Backup filename being restored <code>servername</code> Server name <code>storage</code> Storage backend instance <p>post_media_restore (<code>dbbackup.signals.post_media_restore</code>)</p> <p>Sent after a media restore completes.</p> Parameter Description <code>sender</code> The command class (<code>MediaRestoreCommand</code>) <code>filename</code> Backup filename being restored <code>servername</code> Server name <code>storage</code> Storage backend instance"},{"location":"signals/#usage-examples","title":"Usage Examples","text":""},{"location":"signals/#basic-signal-handler","title":"Basic Signal Handler","text":"<pre><code>from django.dispatch import receiver\nfrom dbbackup import signals\n\n@receiver(signals.pre_backup)\ndef backup_started(sender, database, **kwargs):\n    print(f\"Starting backup of database: {database['NAME']}\")\n\n@receiver(signals.post_backup)\ndef backup_completed(sender, database, filename, **kwargs):\n    print(f\"Completed backup of {database['NAME']} to {filename}\")\n</code></pre>"},{"location":"signals/#notification-system","title":"Notification System","text":"<pre><code>from django.dispatch import receiver\nfrom django.core.mail import send_mail\nfrom dbbackup import signals\n\n@receiver(signals.post_backup)\ndef notify_backup_complete(sender, database, filename, **kwargs):\n    send_mail(\n        subject='Database Backup Complete',\n        message=f'Successfully backed up {database[\"NAME\"]} to {filename}',\n        from_email='backup@example.com',\n        recipient_list=['admin@example.com'],\n    )\n\n@receiver(signals.post_restore)\ndef notify_restore_complete(sender, database_name, filename, **kwargs):\n    send_mail(\n        subject='Database Restore Complete',\n        message=f'Successfully restored {database_name} from {filename}',\n        from_email='backup@example.com',\n        recipient_list=['admin@example.com'],\n    )\n</code></pre>"},{"location":"signals/#logging-and-monitoring","title":"Logging and Monitoring","text":"<pre><code>import logging\nfrom django.dispatch import receiver\nfrom dbbackup import signals\n\nlogger = logging.getLogger(__name__)\n\n@receiver(signals.pre_backup)\ndef log_backup_start(sender, database, **kwargs):\n    logger.info(f\"Starting backup process for {database['NAME']}\")\n\n@receiver(signals.post_backup)\ndef log_backup_complete(sender, database, filename, **kwargs):\n    logger.info(f\"Backup process completed for {database['NAME']}, file: {filename}\")\n\n@receiver(signals.pre_restore)\ndef log_restore_start(sender, database_name, filename, **kwargs):\n    logger.warning(f\"Starting restore process for {database_name} from {filename}\")\n\n@receiver(signals.post_restore)\ndef log_restore_complete(sender, database_name, **kwargs):\n    logger.info(f\"Restore process completed for {database_name}\")\n</code></pre>"},{"location":"signals/#custom-validation","title":"Custom Validation","text":"<pre><code>from django.dispatch import receiver\nfrom django.core.exceptions import ValidationError\nfrom dbbackup import signals\n\n@receiver(signals.pre_restore)\ndef validate_restore_conditions(sender, database_name, **kwargs):\n    # Add custom validation logic\n    if database_name == 'production' and not user_has_permission():\n        raise ValidationError(\"Restore not allowed for production database\")\n</code></pre>"},{"location":"signals/#integration-with-external-services","title":"Integration with External Services","text":"<pre><code>from django.dispatch import receiver\nfrom dbbackup import signals\nimport requests\n\n@receiver(signals.post_backup)\ndef webhook_notification(sender, database, filename, **kwargs):\n    # Send webhook to external monitoring service\n    requests.post('https://monitoring.example.com/webhook', json={\n        'event': 'backup_complete',\n        'database': database['NAME'],\n        'filename': filename,\n        'timestamp': timezone.now().isoformat(),\n    })\n</code></pre>"},{"location":"signals/#registration","title":"Registration","text":"<p>Make sure your signal handlers are imported when Django starts up. The best place is usually in your app's <code>apps.py</code> file:</p> <pre><code>from django.apps import AppConfig\n\nclass YourAppConfig(AppConfig):\n    name = 'your_app'\n\n    def ready(self):\n        import your_app.signals  # Import your signal handlers\n</code></pre> <p>Or in your app's <code>__init__.py</code>:</p> <pre><code>default_app_config = 'your_app.apps.YourAppConfig'\n</code></pre>"},{"location":"storage/","title":"Storage settings","text":"<p>One of the most helpful features of django-dbbackup is the ability to store and retrieve backups from local or remote storage. This functionality is mainly based on the Django Storage API and extends its possibilities.</p> <p>Configure backup storage via the <code>STORAGES</code> setting using the key <code>'dbbackup'</code>. <code>BACKEND</code> is a dotted path to a Django storage class. For example use <code>'django.core.files.storage.FileSystemStorage'</code> for the local filesystem. A few common third party backends (via <code>django-storages</code>) are documented below.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n            \"location\": \"/my/backup/dir/\",\n        },\n    },\n}\n</code></pre> <p>For more granularity, per backend options go into the nested <code>OPTIONS</code> dict:</p> <pre><code>STORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n        ...your_options_here\n        },\n    },\n    \"staticfiles\": {\n        ...\n    },\n}\n</code></pre> <p>Warning</p> <p>Do not configure backup storage with the same configuration as your media files as you'll risk sharing backups inside public directories.</p> <p>If no explicit <code>STORAGES['dbbackup']</code> is provided the default File System Storage is used (pointing at your project media root). Consider isolating backups in a dedicated directory with restricted permissions. Browse additional providers at Django Packages.</p> <p>Note</p> <p>Storing backups to local disk may also be useful for Dropbox if you already have the official Dropbox client installed on your system.</p>"},{"location":"storage/#file-system-storage","title":"File system storage","text":""},{"location":"storage/#setup","title":"Setup","text":"<p>To store your backups on the local file system, simply set up the required settings below.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n            \"location\": \"/my/backup/dir/\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings","title":"Settings","text":"<p><code>location</code></p> <p>Absolute path to the directory that will hold the files.</p> <p><code>file_permissions_mode</code></p> <p>The file system permissions that the file will receive when it is saved.</p> <p><code>directory_permissions_mode</code></p> <p>The file system permissions that the directory will receive when it is saved.</p> <p>See FileSystemStorage's documentation for a full list of available settings.</p>"},{"location":"storage/#google-cloud-storage","title":"Google cloud storage","text":"<p>Our backend for Google cloud storage uses django-storages.</p>"},{"location":"storage/#setup_1","title":"Setup","text":"<p>Create a Google Cloud project and bucket, then install:</p> <pre><code>pip install django-storages[google]\n</code></pre> <p>Add the following to settings (only <code>bucket_name</code> is strictly required). See the django-storages docs for advanced options.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.gcloud.GoogleCloudStorage\",\n        \"OPTIONS\": {\n            \"bucket_name\": \"your_bucket_name\",\n            \"project_id\": \"your_project_id\",\n            \"blob_chunk_size\": 1024 * 1024,\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#amazon-s3","title":"Amazon S3","text":"<p>Our S3 backend uses Django Storages which uses boto3.</p>"},{"location":"storage/#setup_2","title":"Setup","text":"<p>Create an AWS account and S3 bucket, then install dependencies:</p> <pre><code>pip install django-storages[boto3]\n</code></pre> <p>Add this snippet to settings:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.s3boto3.S3Boto3Storage\",\n        \"OPTIONS\": {\n            \"access_key\": \"my_id\",\n            \"secret_key\": \"my_secret\",\n            \"bucket_name\": \"my_bucket_name\",\n            \"default_acl\": \"private\",\n        },\n    }\n}\n</code></pre>"},{"location":"storage/#settings_1","title":"Settings","text":"<p>Note</p> <p>See the Django Storage S3 storage official documentation for all options.</p> <pre><code>The options listed here are a selection of dictionary keys returned by\n`get_default_settings` in django-storages' [`storages/backends/s3boto3.py`](https://github.com/jschneier/django-storages/blob/master/storages/backends/s3boto3.py#L293-L324),\nwhich allows us to write nicer code compared to using the `AWS_` prefixed\nsettings.\n</code></pre> <p><code>access_key</code> - Required</p> <p>Your AWS access key. Create one via the IAM console; avoid using root keys.</p> <p><code>secret_key</code> - Required</p> <p>Your Amazon Web Services secret access key, as a string.</p> <p><code>bucket_name</code> - Required</p> <p>Name of the existing bucket to store backups.</p> <p><code>region_name</code> - Optional</p> <p>AWS region for the bucket (e.g. <code>'us-east-1'</code>).</p> <p><code>endpoint_url</code> - Optional</p> <p>Override the endpoint (for S3-compatible services like MinIO). Must include protocol, e.g. <code>https://minio.internal:9000</code>.</p> <p>If you set a custom endpoint also set <code>region_name</code>.</p> <p><code>default_acl</code> - Required</p> <p>Allowed values: <code>'private'</code> or <code>'public'</code>. Use <code>'private'</code> for backups.</p> <p>NOTE: This value will be removed in a future version of django-storages. See their CHANGELOG for details.</p> <p><code>location</code> - Optional</p> <p>Prefix inside the bucket; include trailing slash. Example: <code>location: 'backups/prod/'</code>.</p>"},{"location":"storage/#dropbox","title":"Dropbox","text":"<p>Create a Dropbox app and obtain an access token, then configure the backend.</p>"},{"location":"storage/#setup_3","title":"Setup","text":"<p>First, configure your Dropbox account by following these steps:</p> <ol> <li> <p>Login to Dropbox and navigate to Developers \u00bb MyApps.</p> </li> <li> <p>Click the button to create a new app and name it whatever you like.    As an example, I named mine 'Website Backups'.</p> </li> <li> <p>After your app is created, note the options button and more    importantly the 'App Key' and 'App Secret' values inside. You'll need    those later.</p> </li> </ol> <p>Then, configure your Django project by installing the required dependencies:</p> <pre><code>pip install dropbox django-storages\n</code></pre> <p>And make sure you have the following required settings:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.dropbox.DropBoxStorage\",\n        \"OPTIONS\": {\n            \"oauth2_access_token\": \"my_token\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_2","title":"Settings","text":"<p>Note</p> <p>See django-storages dropbox official documentation for more details.</p> <p><code>oauth2_access_token</code> - Required</p> <p>OAuth 2 access token generated for the app.</p> <p><code>root_path</code></p> <p>Restrict storage operations to this folder prefix.</p>"},{"location":"storage/#ftp","title":"FTP","text":"<p>To store your database backups on a remote filesystem via FTP, simply set up the required settings below.</p>"},{"location":"storage/#setup_4","title":"Setup","text":"<pre><code>pip install django-storages\n</code></pre> <p>Warning</p> <p>This storage doesn't use a private connection for communication, so don't use it if you're not certain about the security of the link between the client and the server.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.ftp.FTPStorage\",\n        \"OPTIONS\": {\n            \"location\": \"ftp://user:pass@server:21\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_3","title":"Settings","text":"<p><code>location</code> - Required</p> <p>FTP URI including optional credentials and port. Example: <code>ftp://user:pass@ftp.example.com:21</code>.</p>"},{"location":"storage/#sftp","title":"SFTP","text":"<p>To store your database backups on a remote filesystem via SFTP, simply set up the required settings below.</p>"},{"location":"storage/#setup_5","title":"Setup","text":"<p>This backend is from django-storages with the Paramiko backend.</p> <pre><code>pip install paramiko django-storages\n</code></pre> <p>The following configuration grants SSH server access to the local user:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.sftpstorage.SFTPStorage\",\n        \"OPTIONS\": {\n            'host': 'myserver',\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_4","title":"Settings","text":"<p><code>host</code> - Required</p> <p>Host name or address of the SSH server.</p> <p><code>root_path</code> - Default <code>~/</code></p> <p>Jail storage to this directory.</p> <p><code>params</code> - Default <code>{}</code></p> <p>Argument used by method: <code>paramiko.SSHClient.connect()</code>. See paramiko SSHClient.connect() documentation for details.</p> <p><code>interactive</code> - Default <code>False</code></p> <p>A boolean indicating whether to prompt for a password if the connection cannot be made using keys and there is not already a password in <code>params</code>.</p> <p><code>file_mode</code></p> <p>UID of the account that should be set as owner of the files on the remote.</p> <p><code>dir_mode</code></p> <p>GID of the group that should be set on the files on the remote host.</p> <p><code>known_host_file</code></p> <p>Absolute path of known_hosts file; if it isn't set <code>\"~/.ssh/known_hosts\"</code> will be used.</p>"}]}