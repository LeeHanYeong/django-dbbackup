{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django DBBackup","text":"<p>This Django application provides management commands to help backup and restore your project database and media files with various storages such as Amazon S3, Dropbox, local file storage, or any Django-supported storage.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Secure your backup with GPG signature and encryption.</li> <li>Archive with compression.</li> <li>Easily manage remote archiving.</li> <li>Keep your development database up to date.</li> <li>Set up automated backups with Crontab or Celery.</li> <li>Manually backup and restore via Django management commands.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For more details, see the official documentation.</p>"},{"location":"#why-use-dbbackup","title":"Why use DBBackup?","text":"<p>DBBackup gives you a simple yet robust interface to backup, encrypt, transmit, and restore your database and media.</p> <p>In a few words, it is a pipe between your Django project and your backups. Behind the hood, your database's standard/best procedure is used to backup and restore data. Optionally, DBBackup can apply compression and/or encryption before transferring the data to nearly any storage system.</p>"},{"location":"#other-resources","title":"Other Resources","text":"<ul> <li>GitHub repository</li> <li>PyPI project</li> <li>Documentation</li> <li>GitHub issues</li> <li>GitHub discussions</li> <li>GitHub pull requests</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Implement new <code>SqliteBackupConnector</code> to backup SQLite3 databases using the <code>.backup</code> command (safe to execute on databases with active connections).</li> <li>Verified full Windows compatibility via new CI workflows.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>This repository has been transferred out of Jazzband due to logistical concerns.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Drop support for end-of-life Python 3.7 and 3.8.</li> <li>Drop support for end-of-life Django 3.2.</li> <li>Drop support for <code>DBBACKUP_STORAGE</code> AND <code>DBBACKUP_STORAGE_OPTIONS</code> settings, use Django's <code>STORAGES['dbbackup']</code> setting instead.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix issues with parsing excess whitespace within <code>dbbackup -d \"&lt;COMMA_SEPARATED_ARGS&gt;\"</code></li> <li>Fix encryption support when using <code>gnupg==5.x</code>.</li> <li>Resolve SQLite backup temporary file locking issues on Windows.</li> <li>Fix MediaRestore path corruption for files containing \"media\" in their paths.</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Use environment variable for PostgreSQL password to prevent password leakage in logs/emails.</li> </ul>"},{"location":"changelog/#430-2025-05-09","title":"4.3.0 - 2025-05-09","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add generic <code>--pg-options</code> to pass custom options to postgres.</li> <li>Add option <code>--if-exists</code> for <code>pg_dump</code> command.</li> <li>Support Python 3.13 and Django 5.2.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Empty string as HOST for postgres unix domain socket connection is now supported.</li> </ul>"},{"location":"changelog/#421-2024-08-23","title":"4.2.1 - 2024-08-23","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Add <code>--no-drop</code> option to <code>dbrestore</code> command to prevent dropping tables before restoring data.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix bug where sqlite <code>dbrestore</code> would fail if field data contains the line break character.</li> </ul>"},{"location":"changelog/#420-2024-08-22","title":"4.2.0 - 2024-08-22","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add PostgreSQL Schema support.</li> <li>Add support for new <code>STORAGES</code> (Django 4.2+) setting under the 'dbbackup' alias.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Set postgres default database <code>HOST</code> to <code>\"localhost\"</code>.</li> <li>Add warning for filenames with slashes in them.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Remove usage of deprecated <code>get_storage_class</code> function in newer Django versions.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fix restore of database from S3 storage by reintroducing <code>inputfile.seek(0)</code> to <code>utils.uncompress_file</code>.</li> <li>Fix bug where dbbackup management commands would not respect <code>settings.py:DBBACKUP_DATABASES</code>.</li> </ul>"},{"location":"changelog/#410-2024-01-14","title":"4.1.0 - 2024-01-14","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Support Python 3.11 and 3.12.</li> <li>Support Django 4.1, 4.2, and 5.0.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Update documentation for backup directory consistency and update links.</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Drop python 3.6.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix restore fail after editing filename.</li> <li><code>RESTORE_PREFIX</code> for <code>RESTORE_SUFFIX</code>.</li> </ul>"},{"location":"changelog/#402-2022-09-27","title":"4.0.2 - 2022-09-27","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Support for prometheus wrapped databases.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Backup of SQLite fail if there are Virtual Tables (e.g. FTS tables).</li> <li>Fix broken <code>unencrypt_file</code> function in <code>python-gnupg</code>.</li> </ul>"},{"location":"changelog/#401-2022-07-09","title":"4.0.1 - 2022-07-09","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Enable functional tests in CI.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>As of this version, dbbackup is now within Jazzband! This version tests our Jazzband release CI, and adds miscellaneous refactoring/cleanup.</li> <li>Update <code>settings.py</code> comment.</li> <li>Jazzband transfer tasks.</li> <li>Refactoring and tooling.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix GitHub Actions configuration.</li> </ul>"},{"location":"changelog/#400b0-2021-12-19","title":"4.0.0b0 - 2021-12-19","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Add authentication database support for MongoDB.</li> <li>Explicitly support Python 3.6+.</li> <li>Add support for exclude tables data in the command interface.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Replace <code>ugettext_lazy</code> with <code>gettext_lazy</code>.</li> <li>Changed logging settings from <code>settings.py</code> to late init.</li> <li>Use <code>exclude-table-data</code> instead of <code>exclude-table</code>.</li> <li>Move author and version information into <code>setup.py</code> to allow building package in isolated environment (e.g. with the <code>build</code> package).</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Remove six dependency.</li> <li>Drop support for end of life Django versions. Currently support 2.2, 3.2, 4.0.</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix <code>RemovedInDjango41Warning</code> related to <code>default_app_config</code>.</li> <li>Fix authentication error when postgres is password protected.</li> <li>Documentation fixes.</li> </ul>"},{"location":"changelog/#330-2020-04-14","title":"3.3.0 - 2020-04-14","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li><code>\"output-filename\"</code> in <code>mediabackup</code> command.</li> <li>Updates to include SFTP storage.</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fixes for test infrastructure and mongodb support.</li> <li>sqlite3: don't throw warnings if table already exists.</li> <li>Fixes for django v3 and update travis.</li> <li>Restoring from FTP.</li> <li>Fix management commands when using Postgres on non-latin Windows.</li> <li>Fix improper database name selection when performing a restore.</li> </ul>"},{"location":"changelog/#320-2017-09-18","title":"3.2.0 - 2017-09-18","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li><code>PgDumpBinaryConnector</code> (binary <code>pg_dump</code> integration) with related functional tests.</li> <li>Option to keep specific old backups (custom clean old backups logic).</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Updated PostgreSQL documentation and help text for clarity.</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>SFTP storage file attribute error (\"SFTPStorageFile object has no attribute name\").</li> <li>Escaping of passwords passed to commands.</li> <li>Corrected management command help text after flag logic change.</li> </ul>"},{"location":"changelog/#313-2016-11-25","title":"3.1.3 - 2016-11-25","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Reverted a regression in <code>pg_dump</code> database name handling introduced shortly before.</li> </ul>"},{"location":"changelog/#312-2016-11-25","title":"3.1.2 - 2016-11-25","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Correct <code>pg_dump</code> invocation: proper username and database argument handling.</li> </ul>"},{"location":"changelog/#311-2016-11-16","title":"3.1.1 - 2016-11-16","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Unicode handling issues with SQLite backups.</li> </ul>"},{"location":"changelog/#310-2016-11-15","title":"3.1.0 - 2016-11-15","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Support for inheriting parent environment variables in command connectors (<code>USE_PARENT_ENV</code>).</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Complete revamp of logging and error email notification system (more structured logging &amp; tests).</li> </ul>"},{"location":"changelog/#304-2016-11-14","title":"3.0.4 - 2016-11-14","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Ability to link / register custom connectors.</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Use na\u00efve (timezone-unaware) <code>datetime</code> in backup filenames for broader compatibility.</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li><code>mediabackup</code> timeout issue.</li> <li>Improved PostgreSQL <code>dbrestore</code> error recognition.</li> </ul>"},{"location":"changelog/#303-2016-09-15","title":"3.0.3 - 2016-09-15","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Server name filter for database and media backup/restore.</li> <li>Ability to select multiple databases for backup.</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Improved filename generation logic.</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Database filter logic and clean backup behavior.</li> </ul>"},{"location":"changelog/#302-2016-08-06","title":"3.0.2 - 2016-08-06","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Disabled Django loggers inadvertently affecting application logging.</li> </ul>"},{"location":"changelog/#301-2016-08-04","title":"3.0.1 - 2016-08-04","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>New connector architecture with dedicated connectors for PostgreSQL, MySQL, SQLite (copy) and MongoDB.</li> <li>Media backup &amp; restore system overhaul (per-file processing, media restore command &amp; tests).</li> <li>Exclude table/data options, prefix &amp; suffix options for connector commands.</li> <li>Environment variable control for command execution.</li> <li>GIS database engine mapping support.</li> <li>Functional, integration and upgrade test suites; app &amp; system checks integration.</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Refactored and unified code between database &amp; media backup/restore commands.</li> <li>Renamed <code>mediabackup</code> option (<code>--no-compress</code> replaced by explicit <code>--compress</code>).</li> </ul>"},{"location":"changelog/#removed_4","title":"Removed","text":"<ul> <li>Legacy <code>DBCommand</code> code in favor of new connector system.</li> </ul>"},{"location":"changelog/#250-2016-03-29","title":"2.5.0 - 2016-03-29","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li><code>--filename</code> and <code>--path</code> options for <code>dbbackup</code> / <code>dbrestore</code> commands.</li> <li>Binary size unit prefixes in output.</li> </ul>"},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Dropbox storage updated to OAuth2 &amp; Python 3 compatibility.</li> </ul>"},{"location":"changelog/#removed_5","title":"Removed","text":"<ul> <li><code>DBBACKUP_DROPBOX_ACCESS_TYPE</code> setting (deprecated by OAuth2 changes).</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>NameError for missing <code>warnings</code> import.</li> <li>Wildcard handling in generated filenames; proper server name derivation for SQLite paths.</li> </ul>"},{"location":"changelog/#233-2015-10-05","title":"2.3.3 - 2015-10-05","text":""},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Initial copy from BitBucket to GitHub.</li> </ul>"},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Miscellaneous maintenance and minor bug fixes.</li> </ul>"},{"location":"commands/","title":"Commands","text":"<p>The primary usage of DBBackup is with command line tools. By default, commands will create backups and upload to your defined storage or download and restore the latest backup.</p> <p>Arguments can be passed to commands to compress/uncompress and encrypt/decrypt.</p>"},{"location":"commands/#dbbackup","title":"dbbackup","text":"<p>Backup of database.</p> <pre><code>$ ./manage.py dbbackup\nBacking Up Database: tmp.x0kN9sYSqk\nBackup size: 3.3 KiB\nWriting file to tmp-zuluvm-2016-07-29-100954.dump\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py dbbackup --help\n</code></pre>"},{"location":"commands/#dbrestore","title":"dbrestore","text":"<p>Restore a database.</p> <pre><code>$ ./manage.py dbrestore\nRestoring backup for database: tmp.x0kN9sYSqk\nFinding latest backup\nRestoring: tmp-zuluvm-2016-07-29-100954.dump\nRestore tempfile created: 3.3 KiB\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py dbrestore --help\n</code></pre>"},{"location":"commands/#mediabackup","title":"mediabackup","text":"<p>Backup media files, gather all in a tarball and encrypt or compress.</p> <pre><code>$ ./manage.py mediabackup\nBackup size: 10.0 KiB\nWriting file to zuluvm-2016-07-04-081612.tar\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py mediabackup --help\n</code></pre>"},{"location":"commands/#mediarestore","title":"mediarestore","text":"<p>Restore media files, extract files from archive and put into media storage.</p> <pre><code>$ ./manage.py mediarestore\nRestoring backup for media files\nFinding latest backup\nReading file zuluvm-2016-07-04-082551.tar\nRestoring: zuluvm-2016-07-04-082551.tar\nBackup size: 10.0 KiB\nAre you sure you want to continue? [Y/n]\n2 file(s) restored\n</code></pre> <p>For detailed help information, run:</p> <pre><code>python manage.py mediarestore --help\n</code></pre>"},{"location":"commands/#listbackups","title":"listbackups","text":"<p>This command helps to list backups filtered by type (<code>'media'</code> or <code>'db'</code>), by compression or encryption.</p> <p>For detailed help information, run:</p> <pre><code>python manage.py listbackups --help\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#general-settings","title":"General settings","text":""},{"location":"configuration/#dbbackup_databases","title":"DBBACKUP_DATABASES","text":"<p>List of key entries for <code>settings.DATABASES</code> which shall be used to connect and create database backups.</p> <p>Default: <code>list(settings.DATABASES.keys())</code> (keys of all entries listed)</p>"},{"location":"configuration/#dbbackup_tmp_dir","title":"DBBACKUP_TMP_DIR","text":"<p>Directory to be used in local filesystem for temporary files.</p> <p>Default: <code>tempfile.gettempdir()</code></p>"},{"location":"configuration/#dbbackup_tmp_file_max_size","title":"DBBACKUP_TMP_FILE_MAX_SIZE","text":"<p>Maximum size in bytes for file handling in memory before a temporary file is written in <code>DBBACKUP_TMP_DIR</code>.</p> <p>Default: <code>10*1024*1024</code></p>"},{"location":"configuration/#dbbackup_cleanup_keep-and-dbbackup_cleanup_keep_media","title":"DBBACKUP_CLEANUP_KEEP and DBBACKUP_CLEANUP_KEEP_MEDIA","text":"<p>When issuing <code>dbbackup</code> and <code>mediabackup</code> with <code>--clean &lt;amount&gt;</code> option, the backup keeps this amount of most recent files. Older files are removed.</p> <p>Default: <code>10</code> (backups)</p>"},{"location":"configuration/#dbbackup_cleanup_keep_filter","title":"DBBACKUP_CLEANUP_KEEP_FILTER","text":"<p>A callable that takes a filename (of an old backup, to be cleaned) and returns a boolean indicating whether the backup should be kept (<code>True</code>) or deleted (<code>False</code>).</p> <p>Default: <code>lambda filename: False</code></p> <p>This can be used to keep monthly backups, for example.</p>"},{"location":"configuration/#dbbackup_date_format","title":"DBBACKUP_DATE_FORMAT","text":"<p>Date format to use for naming files. It must contain only alphanumerical characters, <code>'_'</code>, <code>'-'</code> or <code>'%'</code>.</p> <p>Default: <code>'%Y-%m-%d-%H%M%S'</code></p>"},{"location":"configuration/#dbbackup_hostname","title":"DBBACKUP_HOSTNAME","text":"<p>Used to identify a backup by a server name in the file name.</p> <p>Default: <code>socket.gethostname()</code></p>"},{"location":"configuration/#dbbackup_filename_template","title":"DBBACKUP_FILENAME_TEMPLATE","text":"<p>The template to use when generating the backup filename. By default this is <code>'{databasename}-{servername}-{datetime}.{extension}'</code>. This setting can also be made a function which takes the following keyword arguments:</p> <pre><code>def backup_filename(databasename, servername, datetime, extension, content_type):\n    pass\n\nDBBACKUP_FILENAME_TEMPLATE = backup_filename\n</code></pre> <p>This allows you to modify the entire format of the filename, for example, if you want to take advantage of Amazon S3's automatic expiry feature, you need to prefix your backups differently based on when you want them to expire.</p> <p><code>{datetime}</code> is rendered with <code>DBBACKUP_DATE_FORMAT</code>.</p>"},{"location":"configuration/#dbbackup_media_filename_template","title":"DBBACKUP_MEDIA_FILENAME_TEMPLATE","text":"<p>Same as <code>DBBACKUP_FILENAME_TEMPLATE</code> but for media files backups.</p>"},{"location":"configuration/#encrypting-your-backups","title":"Encrypting your backups","text":"<p>Considering that you might be putting secure data on external servers and perhaps untrusted servers where it gets forgotten over time, it's always a good idea to encrypt backups.</p> <p>Just remember to keep the encryption keys safe, too!</p> <p>You can encrypt a backup with the <code>--encrypt</code> option. The backup is done using GPG.</p> <pre><code>python manage.py dbbackup --encrypt\n</code></pre> <p>...or when restoring from an encrypted backup:</p> <pre><code>python manage.py dbrestore --decrypt\n</code></pre> <p>Requirements:</p> <ul> <li>Install the python package python-gnupg: <code>pip install python-gnupg&gt;=0.5.0</code>.</li> <li>You need a GPG key. (GPG manual)</li> <li>Set the setting <code>DBBACKUP_GPG_RECIPIENT</code> to the name of the GPG key.</li> </ul> <p>Note (Windows): The <code>gpg</code> executable must be installed and on your PATH for encryption/decryption. If it is absent, django-dbbackup still works; only encryption-related features are unavailable. The test suite will automatically skip encryption tests when <code>gpg</code> is not found.</p>"},{"location":"configuration/#dbbackup_gpg_always_trust","title":"DBBACKUP_GPG_ALWAYS_TRUST","text":"<p>The encryption of the backup file fails if GPG does not trust the public encryption key. The solution is to set the option 'trust-model' to 'always'. By default this value is <code>False</code>. Set this to <code>True</code> to enable this option.</p>"},{"location":"configuration/#dbbackup_gpg_recipient","title":"DBBACKUP_GPG_RECIPIENT","text":"<p>The name of the key that is used for encryption. This setting is only used when making a backup with the <code>--encrypt</code> or <code>--decrypt</code> option.</p>"},{"location":"configuration/#email-configuration","title":"Email configuration","text":""},{"location":"configuration/#dbbackup_send_email","title":"DBBACKUP_SEND_EMAIL","text":"<p>Controls whether or not django-dbbackup sends an error email when an uncaught exception is received.</p> <p>Default: <code>True</code></p>"},{"location":"configuration/#dbbackup_server_email","title":"DBBACKUP_SERVER_EMAIL","text":"<p>The email address that error messages come from, such as those sent to <code>DBBACKUP_ADMINS</code>.</p> <p>Default: <code>django.conf.settings.SERVER_EMAIL</code></p>"},{"location":"configuration/#dbbackup_admins","title":"DBBACKUP_ADMINS","text":"<p>A list of all the people who get code error notifications. When <code>DEBUG=False</code> and an operation raises an exception, DBBackup will email these people with the full exception information. This should be a tuple of (Full name, email address).</p> <p>Default: <code>django.conf.settings.ADMINS</code></p> <p>Warning</p> <p><code>DBBACKUP_FAILURE_RECIPIENTS</code> was used before and is now deprecated</p>"},{"location":"configuration/#dbbackup_email_subject_prefix","title":"DBBACKUP_EMAIL_SUBJECT_PREFIX","text":"<p>Subject-line prefix for email messages sent by DBBackup.</p> <p>Default: <code>'[dbbackup] '</code></p>"},{"location":"configuration/#database-configuration","title":"Database configuration","text":"<p>By default, DBBackup uses parameters from <code>settings.DATABASES</code> but you can make an independent configuration, see Database settings</p>"},{"location":"configuration/#storage-configuration","title":"Storage configuration","text":"<p>You have to use a storage for your backups, see Storage settings for more.</p>"},{"location":"contributing/","title":"Contributing guide","text":"<p>Django-dbbackup is a free license software where all help is welcomed. This documentation aims to help users or developers to bring their contributions to this project.</p>"},{"location":"contributing/#creating-a-development-environment","title":"Creating a development environment","text":"<p>If you plan to make code changes to this repository, you will need to install the following dependencies first:</p> <ul> <li>Git</li> <li>Python 3.9+</li> <li>Hatch</li> </ul> <p>Once you finish installing these dependencies, you can clone this repository:</p> <pre><code>git clone https://github.com/Archmonger/django-dbbackup.git\ncd django-dbbackup\n</code></pre>"},{"location":"contributing/#executing-test-environment-commands","title":"Executing test environment commands","text":"<p>By utilizing <code>hatch</code>, the following commands are available to manage the development environment.</p>"},{"location":"contributing/#tests","title":"Tests","text":"Command Description <code>hatch test</code> Run Python tests using the current environment's Python version <code>hatch test --all</code> Run tests using all compatible Python and Django versions <code>hatch test --python 3.9</code> Run tests using a specific Python version <code>hatch test --include \"django=5.1\"</code> Run tests using a specific Django version <code>hatch test -k test_backup_filter</code> Run only a specific test What other arguments are available to me? <p>The <code>hatch test</code> command is a wrapper for <code>pytest</code>. Hatch \"intercepts\" a handful of arguments, which can be previewed by typing <code>hatch test --help</code>.</p> <p>Any additional arguments in the <code>test</code> command are directly passed on to pytest. See the pytest documentation for what additional arguments are available.</p>"},{"location":"contributing/#linting-and-formatting","title":"Linting and Formatting","text":"Command Description <code>hatch run lint:format</code> Run formatters to fix code style <code>hatch run lint:format-check</code> Check code formatting without making changes <code>hatch run lint:check</code> Run all linters <code>hatch run precommit:check</code> Run all <code>pre-commit</code> checks configured within this repository <code>hatch run precommit:update</code> Update the <code>pre-commit</code> hooks configured within this repository Configure your IDE for linting <p>This repository uses <code>ruff</code> and <code>pylint</code> for linting and formatting.</p> <p>You can install <code>ruff</code> as a plugin to your preferred code editor to create a similar environment.</p>"},{"location":"contributing/#functional-testing","title":"Functional Testing","text":"Command Description <code>hatch run functional:test</code> Run end-to-end backup and restore tests <p>The functional tests perform real database and media backup/restore cycles to ensure the commands work correctly.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"Command Description <code>hatch run docs:serve</code> Start the <code>mkdocs</code> server to view documentation locally <code>hatch run docs:build</code> Build the documentation"},{"location":"contributing/#environment-management","title":"Environment Management","text":"Command Description <code>hatch build --clean</code> Build the package from source <code>hatch env prune</code> Delete all virtual environments created by <code>hatch</code> <code>hatch python install 3.12</code> Install a specific Python version to your system Check out Hatch for all available commands! <p>This documentation only covers commonly used commands.</p> <p>You can type <code>hatch --help</code> to see all available commands.</p>"},{"location":"contributing/#submit-a-bug-issue-or-enhancement","title":"Submit a bug, issue or enhancement","text":"<p>All communication are made with GitHub issues. Do not hesitate to open a issue if:</p> <ul> <li>You have an improvement idea</li> <li>You found a bug</li> <li>You've got a question</li> <li>More generally something seems wrong for you</li> </ul>"},{"location":"contributing/#make-a-patch","title":"Make a patch","text":"<p>We use GitHub pull requests to manage all patches. For a better handling of requests we advise you to:</p> <ol> <li>Fork the project and make a new branch</li> <li>Make your changes with tests if possible and documentation if needed</li> <li>Run <code>hatch test</code> and <code>hatch run functional:test</code> to verify your changes</li> <li>Run <code>hatch run lint:check</code> to ensure code quality</li> <li>Push changes to your fork repository and test it with GitHub Actions</li> <li>If it succeeds, open a pull request</li> <li>Bother us until we give you an answer</li> </ol> <p>Note</p> <p>We recommend testing with multiple Python and Django versions using <code>hatch test --all</code> before pushing. DBBackup uses a lot of file operations, so breaks between versions are possible.</p>"},{"location":"contributing/#test-environment-configuration","title":"Test environment configuration","text":"<p>DBBackup contains a test Django project at <code>dbbackup.tests</code> and its <code>settings</code> module. This configuration takes care of the following environment variables:</p> <p><code>DB_ENGINE</code> - Default: <code>django.db.backends.sqlite3</code></p> <p>Database engine to use. See <code>django.db.backends</code> for default backends.</p> <p><code>DB_NAME</code> - Default: <code>:memory:</code></p> <p>Database name. Should be set correctly if a database other than sqlite3 is used.</p> <p><code>DB_USER</code> - Default: <code>None</code></p> <p>Database username</p> <p><code>DB_PASSWORD</code> - Default: <code>None</code></p> <p>Database password</p> <p><code>DB_HOST</code> - Default: <code>None</code></p> <p>Database host</p> <p><code>MEDIA_ROOT</code> - Default= <code>tempfile.mkdtemp()</code></p> <p>Django's <code>MEDIA_ROOT</code>, useful if you want test media backup from filesystem</p> <p><code>STORAGE</code> - Default: <code>dbbackup.tests.utils.FakeStorage</code></p> <p>Storage used for backups</p> <p><code>STORAGE_OPTIONS</code></p> <p>Options for instantiating the chosen storage. It must be formatted as <code>\"key1=foo,key2=bar\"</code> and will be converted into a <code>dict</code>.</p>"},{"location":"databases/","title":"Database settings","text":"<p>The following databases are supported by this application:</p> <ul> <li>SQLite</li> <li>MySQL</li> <li>PostgreSQL</li> <li>MongoDB</li> <li>...and any other that you might implement</li> </ul> <p>By default, DBBackup will try to use your database settings in <code>DATABASES</code> to handle the database, but some databases require custom options so you might want to use different parameters for backups. That's why we included a <code>DBBACKUP_CONNECTORS</code> setting; it follows the form of the django <code>DATABASES</code> setting:</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        'USER': 'backupuser',\n        'PASSWORD': 'backuppassword',\n        'HOST': 'replica-for-backup'\n    }\n}\n</code></pre> <p>This configuration will allow you to use a replica with a different host and user, which is a great practice if you don't want to overload your main database.</p> <p>DBBackup uses <code>Connectors</code> for creating and restoring backups; below you'll see specific parameters for the built-in ones.</p>"},{"location":"databases/#common","title":"Common","text":"<p>All connectors have the following parameters:</p>"},{"location":"databases/#connector","title":"CONNECTOR","text":"<p>Absolute path to a connector class by default is:</p> <ul> <li><code>dbbackup.db.sqlite.SqliteConnector</code> for <code>'django.db.backends.sqlite3'</code></li> <li><code>dbbackup.db.mysql.MysqlDumpConnector</code> for <code>django.db.backends.mysql</code></li> <li><code>dbbackup.db.postgresql.PgDumpConnector</code> for <code>django.db.backends.postgresql</code></li> <li><code>dbbackup.db.postgresql.PgDumpGisConnector</code> for <code>django.contrib.gis.db.backends.postgis</code></li> <li><code>dbbackup.db.mongodb.MongoDumpConnector</code> for <code>django_mongodb_engine</code></li> </ul> <p>All supported built-in connectors are described in more detail below.</p> <p>Following database wrappers from <code>django-prometheus</code> module are supported:</p> <ul> <li><code>django_prometheus.db.backends.postgresql</code> for <code>dbbackup.db.postgresql.PgDumpBinaryConnector</code></li> <li><code>django_prometheus.db.backends.sqlite3</code> for <code>dbbackup.db.sqlite.SqliteConnector</code></li> <li><code>django_prometheus.db.backends.mysql</code> for <code>dbbackup.db.mysql.MysqlDumpConnector</code></li> <li><code>django_prometheus.db.backends.postgis</code> for <code>dbbackup.db.postgresql.PgDumpGisConnector</code></li> </ul>"},{"location":"databases/#exclude","title":"EXCLUDE","text":"<p>Tables to exclude from backup as list. This option may be unavailable for connectors when making snapshots.</p>"},{"location":"databases/#extension","title":"EXTENSION","text":"<p>Extension of backup file name, default <code>'dump'</code>.</p>"},{"location":"databases/#command-connectors","title":"Command connectors","text":"<p>Some connectors use a command line tool as a dump engine, <code>mysqldump</code> for example. These kinds of tools have common attributes:</p>"},{"location":"databases/#dump_cmd","title":"DUMP_CMD","text":"<p>Path to the command used to create a backup; default is the appropriate command supposed to be in your PATH, for example: <code>'mysqldump'</code> for MySQL.</p> <p>This setting is useful only for connectors using command line tools (children of <code>dbbackup.db.base.BaseCommandDBConnector</code>)</p>"},{"location":"databases/#restore_cmd","title":"RESTORE_CMD","text":"<p>Same as <code>DUMP_CMD</code> but used when restoring.</p>"},{"location":"databases/#dump_prefix-and-restore_prefix","title":"DUMP_PREFIX and RESTORE_PREFIX","text":"<p>String to include as prefix of dump or restore command. It will be added with a space between the launched command and its prefix.</p>"},{"location":"databases/#dump_suffix-and-restore_suffix","title":"DUMP_SUFFIX and RESTORE_SUFFIX","text":"<p>String to include as suffix of dump or restore command. It will be added with a space between the launched command and its suffix.</p>"},{"location":"databases/#env-dump_env-and-restore_env","title":"ENV, DUMP_ENV and RESTORE_ENV","text":"<p>Environment variables used during command running, default are <code>{}</code>. <code>ENV</code> is used for every command, <code>DUMP_ENV</code> and <code>RESTORE_ENV</code> override the values defined in <code>ENV</code> during the dedicated commands.</p>"},{"location":"databases/#use_parent_env","title":"USE_PARENT_ENV","text":"<p>Specify if the connector will use its parent's environment variables. By default it is <code>True</code> to keep <code>PATH</code>.</p>"},{"location":"databases/#sqlite","title":"SQLite","text":"<p>SQLite uses by default <code>dbbackup.db.sqlite.SqliteConnector</code>.</p>"},{"location":"databases/#sqliteconnector","title":"SqliteConnector","text":"<p>It is in pure Python and copies the behavior of <code>.dump</code> command for creating a SQL dump.</p>"},{"location":"databases/#sqlitebackupconnector","title":"SqliteBackupConnector","text":"<p>The <code>dbbackup.db.sqlite.SqliteBackupConnector</code> makes a copy of the SQLite database file using the <code>.backup</code> command, which is safe to execute while the database has ongoing/active connections. Additionally, it supports dumping in-memory databases by construction.</p>"},{"location":"databases/#sqlitecpconnector","title":"SqliteCPConnector","text":"<p>You can also use <code>dbbackup.db.sqlite.SqliteCPConnector</code> for making a  simple raw copy of your database file, like a snapshot.</p> <p>In-memory database aren't dumpable with it.</p>"},{"location":"databases/#mysql","title":"MySQL","text":"<p>MySQL uses by default <code>dbbackup.db.mysql.MysqlDumpConnector</code>. It uses <code>mysqldump</code> and <code>mysql</code> for its job.</p>"},{"location":"databases/#postgresql","title":"PostgreSQL","text":"<p>Postgres uses by default <code>dbbackup.db.postgresql.PgDumpConnector</code>, but we advise you to use <code>dbbackup.db.postgresql.PgDumpBinaryConnector</code>. The first one uses <code>pg_dump</code> and <code>pqsl</code> for its job, creating RAW SQL files.</p> <p>The second uses <code>pg_restore</code> with binary dump files.</p> <p>They can also use <code>psql</code> for launching administration command.</p>"},{"location":"databases/#single_transaction","title":"SINGLE_TRANSACTION","text":"<p>When doing a restore, wrap everything in a single transaction, so errors cause a rollback.</p> <p>This corresponds to <code>--single-transaction</code> argument of <code>psql</code> and <code>pg_restore</code>.</p> <p>Default: <code>True</code></p>"},{"location":"databases/#drop","title":"DROP","text":"<p>With <code>PgDumpConnector</code>, it includes tables dropping statements in dump file. <code>PgDumpBinaryConnector</code> drops at restoring.</p> <p>This corresponds to <code>--clean</code> argument of <code>pg_dump</code> and <code>pg_restore</code>.</p> <p>Default: <code>True</code></p>"},{"location":"databases/#if_exists","title":"IF_EXISTS","text":"<p>Use DROP ... IF EXISTS commands to drop objects in <code>--clean</code> mode of <code>pg_dump</code>.</p> <p>Default: <code>False</code></p>"},{"location":"databases/#postgis","title":"PostGIS","text":"<p>Set in <code>dbbackup.db.postgresql.PgDumpGisConnector</code>, it does the same as PostgreSQL but launches <code>CREATE EXTENSION IF NOT EXISTS postgis;</code> before restore database.</p>"},{"location":"databases/#psql_cmd","title":"PSQL_CMD","text":"<p>Path to <code>psql</code> command used for administration tasks like enable PostGIS for example, default is <code>psql</code>.</p>"},{"location":"databases/#password","title":"PASSWORD","text":"<p>If you fill this settings <code>PGPASSWORD</code> environment variable will be used with every commands. For security reason, we advise to use <code>.pgpass</code> file.</p>"},{"location":"databases/#admin_user","title":"ADMIN_USER","text":"<p>Username used for launch action with privileges, extension creation for example.</p>"},{"location":"databases/#admin_password","title":"ADMIN_PASSWORD","text":"<p>Password used for launch action with privileges, extension creation for example.</p>"},{"location":"databases/#schemas","title":"SCHEMAS","text":"<p>Specify schemas for database dumps by using a pattern-matching option, including both the selected schema and its contained objects. If not specified, the default behavior is to dump all non-system schemas in the target database. This feature is exclusive to PostgreSQL connectors, and users can choose multiple schemas for a customized dump.</p>"},{"location":"databases/#mongodb","title":"MongoDB","text":"<p>MongoDB uses by default <code>dbbackup.db.mongodb.MongoDumpConnector</code>. it uses <code>mongodump</code> and <code>mongorestore</code> for its job.</p> <p>For AuthEnabled MongoDB Connection, you need to add one custom option <code>AUTH_SOURCE</code> in your <code>DBBACKUP_CONNECTORS</code>.</p> <pre><code>DBBACKUP_CONNECTORS = {\n    'default': {\n        ...\n        'AUTH_SOURCE': 'admin',\n    }\n}\n</code></pre> <p>Or in <code>DATABASES</code> one:</p> <pre><code>DATABASES = {\n    'default': {\n        ...\n        'AUTH_SOURCE': 'admin',\n    }\n}\n</code></pre>"},{"location":"databases/#object_check","title":"OBJECT_CHECK","text":"<p>Validate documents before inserting in database (option <code>--objcheck</code> in command line), default is <code>True</code>.</p>"},{"location":"databases/#drop_1","title":"DROP","text":"<p>Replace objects that are already in database, (option <code>--drop</code> in command line), default is <code>True</code>.</p>"},{"location":"databases/#custom-connectors","title":"Custom connectors","text":"<p>Creating your connector is easy; create a children class from <code>dbbackup.db.base.BaseDBConnector</code> and create <code>_create_dump</code> and <code>_restore_dump</code>. If your connector uses a command line tool, inherit it from <code>dbbackup.db.base.BaseCommandDBConnector</code></p> <p>Here is an example, on how to easily use a custom connector that you have created or even that you simply want to reuse:</p> <pre><code>DBBACKUP_CONNECTOR_MAPPING = {\n    'transaction_hooks.backends.postgis': 'dbbackup.db.postgresql.PgDumpGisConnector',\n}\n</code></pre> <p>Obviously instead of <code>dbbackup.db.postgresql.PgDumpGisConnector</code> you can use the custom connector you have created yourself and <code>transaction_hooks.backends.postgis</code> is simply the database engine name you are using.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-on-your-system","title":"Installing on your system","text":""},{"location":"installation/#getting-the-latest-stable-release","title":"Getting the latest stable release","text":"<pre><code>pip install django-dbbackup\n</code></pre>"},{"location":"installation/#getting-the-latest-from-github","title":"Getting the latest from GitHub","text":"<p>In general, you should not be downloading and installing stuff directly from repositories -- especially not if you are backing up sensitive data.</p> <p>Security is important, bypassing PyPi repositories is a bad habit, because it will bypass the fragile key signatures authentication that are at least present when using PyPi repositories.</p> <pre><code>pip install -e git+https://github.com/Archmonger/django-dbbackup.git#egg=django-dbbackup\n</code></pre>"},{"location":"installation/#add-it-in-your-project","title":"Add it in your project","text":"<p>In your <code>settings.py</code>, make sure you have the following things:</p> <pre><code>INSTALLED_APPS = (\n    ... ,\n    'dbbackup',  # django-dbbackup\n)\n\nSTORAGES = {\n    'dbbackup': {\n        'BACKEND': 'django.core.files.storage.FileSystemStorage',\n        'OPTIONS': {\n            'location': '/my/backup/dir/',\n        },\n    },\n}\n</code></pre> <p>Create the backup directory:</p> <pre><code>mkdir /my/backup/dir/\n</code></pre> <p>Note</p> <p>This configuration uses filesystem storage, but you can use any storage supported by Django API. See Storage settings for more information about it.</p>"},{"location":"installation/#testing-that-everything-worked","title":"Testing that everything worked","text":"<p>Now, you should be able to create your first backup by running:</p> <pre><code>python manage.py dbbackup\n</code></pre> <p>If your database was called <code>default</code> which is the normal Django behaviour of a single-database project, you should now see a new file in your backup directory.</p>"},{"location":"integration/","title":"Integration tutorials","text":"<p>Note</p> <p>If you have a custom and/or interesting way of use DBBackup, do not hesitate to make a pull request.</p>"},{"location":"integration/#django-cron","title":"Django-Cron","text":"<p>Example of cron job with django-cron with file system storage:</p> <pre><code>import os\nfrom django.core import management\nfrom django.conf import settings\nfrom django_cron import CronJobBase, Schedule\n\n\nclass Backup(CronJobBase):\n    RUN_AT_TIMES = ['6:00', '18:00']\n    schedule = Schedule(run_at_times=RUN_AT_TIMES)\n    code = 'my_app.Backup'\n\n    def do(self):\n        management.call_command('dbbackup')\n</code></pre>"},{"location":"integration/#django-crontab","title":"Django-Crontab","text":"<p>Example of cron job with django-crontab with file system storage:</p> <p>In <code>settings.py</code>:</p> <pre><code>CRONTAB_COMMAND_SUFFIX = '2&gt;&amp;1'\nCRONJOBS = [\n    ('0 5 * * *', 'core.backup.backup_job', '&gt;&gt; ' + os.path.join(CORE_DIR, 'backup/backup.log'))\n]\n</code></pre> <p>In <code>backup.py</code>:</p> <pre><code>from datetime import datetime\nfrom django.core import management\n\ndef backup_job():\n    print(\"[{}] Backing up database and media files...\".format(datetime.now()))\n    management.call_command('dbbackup', '--clean')\n    management.call_command('mediabackup', '--clean')\n    print(\"[{}] Backup done!\".format(datetime.now()))\n</code></pre> <p>To add the cron job:</p> <pre><code>python manage.py crontab add\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#bsd-3-clause-license","title":"BSD-3-Clause License","text":"<p>Copyright (c) 2025, Mark Bakhit</p> <p>All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name django-dbbackup nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </p>"},{"location":"storage/","title":"Storage settings","text":"<p>One of the most helpful features of django-dbbackup is the ability to store and retrieve backups from a local or a remote storage. This functionality is mainly based on Django Storage API and extends its possibilities.</p> <p>You can choose your backup storage backend by setting <code>settings.STORAGES['dbbackup']</code>, it must be the full path of a storage class. For example: <code>django.core.files.storage.FileSystemStorage</code> to use file system storage.  Below, we'll list some of the available solutions and their options.</p> <p>The storage's option are gathered in <code>settings.STORAGES['dbbackup']['OPTIONS']</code> which is a dictionary of keywords representing how to configure it.</p> <pre><code>STORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n        ...your_options_here\n        },\n    },\n    \"staticfiles\": {\n        ...\n    },\n}\n</code></pre> <p>Warning</p> <p>Do not configure backup storage with the same configuration as your media files as you'll risk sharing backups inside public directories.</p> <p>By default DBBackup uses the built-in file system storage to manage files on a local directory. Feel free to use any Django storage, you can find a variety of them at Django Packages.</p> <p>Note</p> <p>Storing backups to local disk may also be useful for Dropbox if you already have the official Dropbox client installed on your system.</p>"},{"location":"storage/#file-system-storage","title":"File system storage","text":""},{"location":"storage/#setup","title":"Setup","text":"<p>To store your backups on the local file system, simply setup the required settings below.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n            \"location\": \"/my/backup/dir/\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings","title":"Settings","text":"<p><code>location</code></p> <p>Absolute path to the directory that will hold the files.</p> <p><code>file_permissions_mode</code></p> <p>The file system permissions that the file will receive when it is saved.</p> <p><code>directory_permissions_mode</code></p> <p>The file system permissions that the directory will receive when it is saved.</p> <p>See FileSystemStorage's documentation for a full list of available settings.</p>"},{"location":"storage/#google-cloud-storage","title":"Google cloud storage","text":"<p>Our backend for Google cloud storage uses django-storages.</p>"},{"location":"storage/#setup_1","title":"Setup","text":"<p>In order to backup to Google cloud storage, you'll first need to create an account at google. Once that is complete, you can follow the required setup below.</p> <pre><code>pip install django-storages[google]\n</code></pre> <p>Add the following to your project's settings. Strictly speaking only <code>bucket_name</code> is required, but we'd recommend to add the other two as well. You can also find more settings in the documentation for django-storages</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.gcloud.GoogleCloudStorage\",\n        \"OPTIONS\": {\n            \"bucket_name\": \"your_bucket_name\",\n            \"project_id\": \"your_project_id\",\n            \"blob_chunk_size\": 1024 * 1024,\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#amazon-s3","title":"Amazon S3","text":"<p>Our S3 backend uses Django Storages which uses boto3.</p>"},{"location":"storage/#setup_2","title":"Setup","text":"<p>In order to backup to Amazon S3, you'll first need to create an Amazon Web Services Account and setup your Amazon S3 bucket. Once that is complete, you can follow the required setup below.</p> <pre><code>pip install django-storages[boto3]\n</code></pre> <p>Add the following to your project's settings:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.s3boto3.S3Boto3Storage\",\n        \"OPTIONS\": {\n            \"access_key\": \"my_id\",\n            \"secret_key\": \"my_secret\",\n            \"bucket_name\": \"my_bucket_name\",\n            \"default_acl\": \"private\",\n        },\n    }\n}\n</code></pre>"},{"location":"storage/#settings_1","title":"Settings","text":"<p>Note</p> <p>See the Django Storage S3 storage official documentation for all options.</p> <p>The options listed here are a selection of dictionary keys returned by <code>get_default_settings</code> in django-storages' <code>storages/backends/s3boto3.py</code>, which allows us to write nicer code compared to using the <code>AWS_</code> prefixed settings.</p> <p><code>access_key</code> - Required</p> <p>Your AWS access key as string. This can be found on your Amazon Account Security Credentials page.</p> <p><code>secret_key</code> - Required</p> <p>Your Amazon Web Services secret access key, as a string.</p> <p><code>bucket_name</code> - Required</p> <p>Your Amazon Web Services storage bucket name, as a string. This directory must exist before attempting to create your first backup.</p> <p><code>region_name</code> - Optional</p> <p>Specify the Amazon region, e.g. <code>'us-east-1'</code>.</p> <p><code>endpoint_url</code> - Optional</p> <p>Set this to fully override the endpoint, e.g. to use an alternative S3 service, which is compatible with AWS S3. The value must contain the protocol, e.g. <code>'https://compatible-s3-service.example.com'</code>.</p> <p>If setting this, it is mandatory to also configure <code>region_name</code>.</p> <p><code>default_acl</code> - Required</p> <p>This setting can either be <code>'private'</code> or <code>'public'</code>. Since you want your backups to be secure you'll want to set <code>'default_acl'</code> to <code>'private'</code>.</p> <p>NOTE: This value will be removed in a future version of django-storages. See their CHANGELOG for details.</p> <p><code>location</code> - Optional</p> <p>If you want to store your backups inside a particular folder in your bucket you need to specify the <code>'location'</code>. The folder can be specified as <code>'folder_name/'</code>. You can specify a longer path with <code>'location': 'root_folder/sub_folder/sub_sub_folder/'</code>.</p>"},{"location":"storage/#dropbox","title":"Dropbox","text":"<p>In order to backup to Dropbox, you'll first need to create a Dropbox account and set it up to communicate with the Django-DBBackup application. Don't worry, all instructions are below.</p>"},{"location":"storage/#setup_3","title":"Setup","text":"<p>First, configure your Dropbox account by following these steps:</p> <ol> <li> <p>Login to Dropbox and navigate to Developers \u00bb MyApps.</p> </li> <li> <p>Click the button to create a new app and name it whatever you like.    As an example, I named mine 'Website Backups'.</p> </li> <li> <p>After your app is created, note the options button and more    importantly the 'App Key' and 'App Secret' values inside. You'll need    those later.</p> </li> </ol> <p>Then, configure your Django project by installing the required dependencies:</p> <pre><code>pip install dropbox django-storages\n</code></pre> <p>And make sure you have the following required settings:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.dropbox.DropBoxStorage\",\n        \"OPTIONS\": {\n            \"oauth2_access_token\": \"my_token\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_2","title":"Settings","text":"<p>Note</p> <p>See django-storages dropbox official documentation for more details.</p> <p><code>oauth2_access_token</code> - Required</p> <p>Your OAuth access token</p> <p><code>root_path</code></p> <p>Jail storage to this directory</p>"},{"location":"storage/#ftp","title":"FTP","text":"<p>To store your database backups on a remote filesystem via FTP, simply setup the required settings below.</p>"},{"location":"storage/#setup_4","title":"Setup","text":"<pre><code>pip install django-storages\n</code></pre> <p>Warning</p> <p>This storage doesn't use a private connection for communication so don't use it if you're not certain about the security of the link between the client and the server.</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.ftp.FTPStorage\",\n        \"OPTIONS\": {\n            \"location\": \"ftp://user:pass@server:21\",\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_3","title":"Settings","text":"<p><code>location</code> - Required</p> <p>A FTP URI with optional user, password and port. example: <code>'ftp://anonymous@myftp.net'</code></p>"},{"location":"storage/#sftp","title":"SFTP","text":"<p>To store your database backups on a remote filesystem via SFTP, simply setup the required settings below.</p>"},{"location":"storage/#setup_5","title":"Setup","text":"<p>This backend is from Django-Storages with the paramiko backend.</p> <pre><code>pip install paramiko django-storages\n</code></pre> <p>The following configuration grants SSH server access to the local user:</p> <pre><code>STORAGES = {\n    \"dbbackup\": {\n        \"BACKEND\": \"storages.backends.sftpstorage.SFTPStorage\",\n        \"OPTIONS\": {\n            'host': 'myserver',\n        },\n    },\n}\n</code></pre>"},{"location":"storage/#settings_4","title":"Settings","text":"<p><code>host</code> - Required</p> <p>Host name or address of the SSH server</p> <p><code>root_path</code> - Default <code>~/</code></p> <p>Jail storage to this directory</p> <p><code>params</code> - Default <code>{}</code></p> <p>Argument used by method:<code>paramiko.SSHClient.connect()</code>. See paramiko SSHClient.connect() documentation for details.</p> <p><code>interactive</code> - Default <code>False</code></p> <p>A boolean indicating whether to prompt for a password if the connection cannot be made using keys, and there is not already a password in <code>params</code>.</p> <p><code>file_mode</code></p> <p>UID of the account that should be set as owner of the files on the remote.</p> <p><code>dir_mode</code></p> <p>GID of the group that should be set on the files on the remote host.</p> <p><code>known_host_file</code></p> <p>Absolute path of known_hosts file, if it isn't set <code>\"~/.ssh/known_hosts\"</code> will be used.</p>"}]}